{
  "name": "Advanced Workflow Status Monitoring System",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "workflow-status-monitor",
        "options": {
          "noResponseBody": false
        },
        "responseHeaders": {
          "entries": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "responseCode": 200
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 400],
      "webhookId": "workflow-status-monitoring"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\nconst requiredFields = [];\nconst missingFields = requiredFields.filter(field => !input[field]);\n\n// Validate and sanitize input data\nconst sanitizedData = {\n  monitoring_type: input.monitoring_type || 'all_workflows',\n  user_plan: input.user_plan || 'basic',\n  include_history: Boolean(input.include_history),\n  alert_threshold: input.alert_threshold || 'medium',\n  requested_workflows: input.requested_workflows || ['competitor-monitoring', 'performance-analytics', 'ai-recommendations', 'workflow-status'],\n  refresh_interval: input.refresh_interval || (input.user_plan === 'premium' ? 300 : 900),\n  dashboard_webhook: input.dashboard_webhook || process.env.DASHBOARD_WEBHOOK_URL || 'http://localhost:3001/api/webhooks/workflow-status',\n  timestamp: new Date().toISOString(),\n  execution_id: $execution.id,\n  workflow_id: $workflow.id\n};\n\n// Add monitoring configuration based on user plan\nif (sanitizedData.user_plan === 'premium') {\n  sanitizedData.premium_features = {\n    real_time_monitoring: true,\n    advanced_analytics: true,\n    custom_alerts: true,\n    detailed_history: true,\n    api_integrations: true\n  };\n} else {\n  sanitizedData.premium_features = {\n    real_time_monitoring: false,\n    advanced_analytics: false,\n    custom_alerts: false,\n    detailed_history: false,\n    api_integrations: false,\n    upgrade_required: true\n  };\n}\n\nreturn [{ json: sanitizedData }];"
      },
      "id": "input-validator",
      "name": "Input Validator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "api-check",
              "leftValue": "={{$env.N8N_API_KEY}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ]
        }
      },
      "id": "api-credentials-check",
      "name": "API Credentials Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [500, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "premium-check",
              "leftValue": "={{$json.user_plan}}",
              "rightValue": "premium",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "user-plan-check",
      "name": "User Plan Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "url": "={{$env.N8N_API_BASE_URL || 'http://localhost:5678'}}/api/v1/workflows",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "X-N8N-API-KEY",
          "value": "={{$env.N8N_API_KEY}}"
        },
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3
          }
        }
      },
      "id": "fetch-workflows",
      "name": "Fetch Workflows",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "={{$env.N8N_API_BASE_URL || 'http://localhost:5678'}}/api/v1/executions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "X-N8N-API-KEY",
          "value": "={{$env.N8N_API_KEY}}"
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "={{$json.user_plan === 'premium' ? '200' : '50'}}"
            },
            {
              "name": "includeData",
              "value": "false"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3
          }
        }
      },
      "id": "fetch-executions",
      "name": "Fetch Executions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{$env.N8N_API_BASE_URL || 'http://localhost:5678'}}/api/v1/active",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "X-N8N-API-KEY",
          "value": "={{$env.N8N_API_KEY}}"
        },
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3
          }
        }
      },
      "id": "fetch-active-workflows",
      "name": "Fetch Active Workflows",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 400]
    },
    {
      "parameters": {
        "url": "={{$env.N8N_API_BASE_URL || 'http://localhost:5678'}}/api/v1/workflows/{{$json.workflowId}}/executions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "X-N8N-API-KEY",
          "value": "={{$env.N8N_API_KEY}}"
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "includeData",
              "value": "false"
            }
          ]
        },
        "options": {
          "timeout": 10000,
          "retry": {
            "enabled": true,
            "maxAttempts": 2
          }
        }
      },
      "id": "fetch-workflow-details",
      "name": "Fetch Workflow Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 500]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {
          "waitForAll": true
        }
      },
      "id": "merge-api-data",
      "name": "Merge API Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1100, 350]
    },
    {
      "parameters": {
        "jsCode": "const workflowsResponse = $('Fetch Workflows').first().json;\nconst executionsResponse = $('Fetch Executions').first().json;\nconst activeResponse = $('Fetch Active Workflows').first().json;\nconst originalData = $('Input Validator').first().json;\n\n// Extract data with error handling\nconst workflows = workflowsResponse?.data || [];\nconst executions = executionsResponse?.data || [];\nconst activeWorkflows = activeResponse?.data || [];\n\n// Define dashboard workflows to monitor\nconst targetWorkflows = [\n  'Competitor Monitoring Workflow',\n  'Performance Analytics Workflow',\n  'AI Recommendations Workflow',\n  'Advanced Multi-Touch Nurture Sequences - Production',\n  'Workflow Status Monitoring Workflow',\n  'SEO Content Optimizer Workflow',\n  'Client Communication Automation',\n  'Client Onboarding Automation'\n];\n\n// Filter and process workflows\nconst processedWorkflows = workflows\n  .filter(workflow => targetWorkflows.some(target => \n    workflow.name.toLowerCase().includes(target.toLowerCase()) ||\n    target.toLowerCase().includes(workflow.name.toLowerCase())\n  ))\n  .map(workflow => {\n    const isActive = activeWorkflows.includes(workflow.id);\n    const workflowExecutions = executions.filter(exec => exec.workflowId === workflow.id);\n    \n    // Calculate metrics\n    const totalExecutions = workflowExecutions.length;\n    const successfulExecutions = workflowExecutions.filter(exec => \n      exec.finished && !exec.stoppedAt\n    ).length;\n    const failedExecutions = workflowExecutions.filter(exec => \n      exec.finished && exec.stoppedAt\n    ).length;\n    \n    const successRate = totalExecutions > 0 ? \n      Math.round((successfulExecutions / totalExecutions) * 100) : 0;\n    \n    // Get last execution\n    const lastExecution = workflowExecutions[0];\n    \n    // Calculate average runtime\n    const completedExecutions = workflowExecutions.filter(exec => \n      exec.startedAt && exec.finishedAt\n    );\n    const avgRuntime = completedExecutions.length > 0 ?\n      completedExecutions.reduce((sum, exec) => {\n        const duration = new Date(exec.finishedAt) - new Date(exec.startedAt);\n        return sum + duration;\n      }, 0) / completedExecutions.length / 1000 : 0;\n    \n    // Calculate health score\n    let healthScore = 0;\n    if (isActive) healthScore += 30;\n    if (successRate >= 90) healthScore += 40;\n    else if (successRate >= 70) healthScore += 25;\n    else if (successRate >= 50) healthScore += 10;\n    \n    if (totalExecutions > 0) healthScore += 15;\n    if (lastExecution && new Date(lastExecution.startedAt) > new Date(Date.now() - 24*60*60*1000)) {\n      healthScore += 15;\n    }\n    \n    // Determine health status\n    let healthStatus = 'critical';\n    if (healthScore >= 80) healthStatus = 'healthy';\n    else if (healthScore >= 60) healthStatus = 'warning';\n    else if (healthScore >= 40) healthStatus = 'degraded';\n    \n    return {\n      id: workflow.id,\n      name: workflow.name,\n      display_name: workflow.name.replace(/Workflow$/, '').replace(/- Production$/, '').trim(),\n      active: isActive,\n      health_status: healthStatus,\n      health_score: healthScore,\n      success_rate: successRate,\n      total_executions: totalExecutions,\n      successful_executions: successfulExecutions,\n      failed_executions: failedExecutions,\n      avg_runtime_seconds: Math.round(avgRuntime),\n      last_execution: lastExecution ? {\n        id: lastExecution.id,\n        started_at: lastExecution.startedAt,\n        finished_at: lastExecution.finishedAt,\n        status: lastExecution.finished ? (lastExecution.stoppedAt ? 'failed' : 'success') : 'running',\n        mode: lastExecution.mode\n      } : null,\n      created_at: workflow.createdAt,\n      updated_at: workflow.updatedAt,\n      node_count: workflow.nodes?.length || 0,\n      tags: workflow.tags || []\n    };\n  });\n\n// Add execution trend data for last 7 days\nconst last7Days = [];\nfor (let i = 6; i >= 0; i--) {\n  const date = new Date();\n  date.setDate(date.getDate() - i);\n  const dayStart = new Date(date.setHours(0, 0, 0, 0));\n  const dayEnd = new Date(date.setHours(23, 59, 59, 999));\n  \n  const dayExecutions = executions.filter(exec => {\n    const execDate = new Date(exec.startedAt);\n    return execDate >= dayStart && execDate <= dayEnd;\n  });\n  \n  const daySuccessful = dayExecutions.filter(exec => \n    exec.finished && !exec.stoppedAt\n  ).length;\n  \n  last7Days.push({\n    date: dayStart.toISOString().split('T')[0],\n    total_executions: dayExecutions.length,\n    successful_executions: daySuccessful,\n    success_rate: dayExecutions.length > 0 ? \n      Math.round((daySuccessful / dayExecutions.length) * 100) : 0\n  });\n}\n\nconst processedData = {\n  ...originalData,\n  workflows: processedWorkflows,\n  execution_trend: last7Days,\n  raw_data: {\n    total_workflows: workflows.length,\n    total_executions: executions.length,\n    active_workflows_count: activeWorkflows.length,\n    monitored_workflows_count: processedWorkflows.length\n  }\n};\n\nreturn [{ json: processedData }];"
      },
      "id": "process-workflow-data",
      "name": "Process Workflow Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 350]
    },
    {
      "parameters": {
        "fieldToSplit": "workflows",
        "options": {}
      },
      "id": "split-workflows",
      "name": "Split Workflows",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1500, 350]
    },
    {
      "parameters": {
        "jsCode": "const workflow = $json;\nconst allData = $('Process Workflow Data').first().json;\n\n// Enhanced workflow analysis\nconst enhancedWorkflow = {\n  ...workflow,\n  \n  // Performance indicators\n  performance: {\n    efficiency_score: workflow.avg_runtime_seconds > 0 ? \n      Math.max(0, 100 - (workflow.avg_runtime_seconds / 60) * 10) : 0,\n    reliability_score: workflow.success_rate,\n    activity_score: workflow.total_executions > 10 ? 100 : workflow.total_executions * 10\n  },\n  \n  // Status indicators\n  status_indicators: {\n    is_healthy: workflow.health_score >= 80,\n    needs_attention: workflow.health_score < 60,\n    is_critical: workflow.health_score < 40,\n    recently_active: workflow.last_execution ? \n      new Date(workflow.last_execution.started_at) > new Date(Date.now() - 24*60*60*1000) : false\n  },\n  \n  // Recommendations\n  recommendations: [],\n  \n  // Alerts\n  alerts: []\n};\n\n// Generate recommendations\nif (!workflow.active) {\n  enhancedWorkflow.recommendations.push({\n    type: 'activation',\n    message: 'Consider activating this workflow for automated execution',\n    priority: 'medium'\n  });\n}\n\nif (workflow.success_rate < 90 && workflow.total_executions > 5) {\n  enhancedWorkflow.recommendations.push({\n    type: 'optimization',\n    message: 'Review and optimize workflow for better success rate',\n    priority: 'high'\n  });\n}\n\nif (workflow.avg_runtime_seconds > 300) {\n  enhancedWorkflow.recommendations.push({\n    type: 'performance',\n    message: 'Workflow runtime is high, consider optimization',\n    priority: 'medium'\n  });\n}\n\n// Generate alerts\nif (workflow.health_score < 40) {\n  enhancedWorkflow.alerts.push({\n    type: 'critical',\n    message: `Workflow ${workflow.name} is in critical state`,\n    severity: 'high',\n    timestamp: new Date().toISOString()\n  });\n}\n\nif (workflow.failed_executions > 0 && workflow.success_rate < 50) {\n  enhancedWorkflow.alerts.push({\n    type: 'failure_rate',\n    message: `High failure rate detected for ${workflow.name}`,\n    severity: 'medium',\n    timestamp: new Date().toISOString()\n  });\n}\n\nreturn [{ json: enhancedWorkflow }];"
      },
      "id": "enhance-workflow-data",
      "name": "Enhance Workflow Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 350]
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all enhanced workflow data from the split batch\nconst allWorkflows = [];\nconst inputItems = $input.all();\n\n// Collect all workflow items from the split batch\ninputItems.forEach(item => {\n  if (item.json) {\n    allWorkflows.push(item.json);\n  }\n});\n\n// Return aggregated data\nreturn [{ json: { workflows: allWorkflows } }];"
      },
      "id": "aggregate-enhanced-workflows",
      "name": "Aggregate Enhanced Workflows",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 350]
    },
    {
      "parameters": {
        "jsCode": "const aggregatedData = $input.first().json;\nconst enhancedWorkflows = aggregatedData.workflows;\nconst originalData = $('Process Workflow Data').first().json;\n\n// Calculate system overview\nconst totalWorkflows = enhancedWorkflows.length;\nconst activeWorkflows = enhancedWorkflows.filter(w => w.active).length;\nconst healthyWorkflows = enhancedWorkflows.filter(w => w.status_indicators.is_healthy).length;\nconst criticalWorkflows = enhancedWorkflows.filter(w => w.status_indicators.is_critical).length;\n\nconst systemHealthScore = totalWorkflows > 0 ?\n  Math.round(enhancedWorkflows.reduce((sum, w) => sum + w.health_score, 0) / totalWorkflows) : 0;\n\nconst totalExecutions = enhancedWorkflows.reduce((sum, w) => sum + w.total_executions, 0);\nconst totalSuccessful = enhancedWorkflows.reduce((sum, w) => sum + w.successful_executions, 0);\nconst overallSuccessRate = totalExecutions > 0 ? \n  Math.round((totalSuccessful / totalExecutions) * 100) : 0;\n\n// Collect all alerts\nconst allAlerts = enhancedWorkflows.reduce((alerts, workflow) => {\n  workflow.alerts.forEach(alert => {\n    alerts.push({\n      ...alert,\n      workflow_id: workflow.id,\n      workflow_name: workflow.name\n    });\n  });\n  return alerts;\n}, []);\n\n// Sort alerts by severity\nconst alertPriority = { 'high': 3, 'medium': 2, 'low': 1 };\nallAlerts.sort((a, b) => alertPriority[b.severity] - alertPriority[a.severity]);\n\n// Collect all recommendations\nconst allRecommendations = enhancedWorkflows.reduce((recommendations, workflow) => {\n  workflow.recommendations.forEach(rec => {\n    recommendations.push({\n      ...rec,\n      workflow_id: workflow.id,\n      workflow_name: workflow.name\n    });\n  });\n  return recommendations;\n}, []);\n\n// Calculate performance metrics\nconst avgRuntime = enhancedWorkflows.length > 0 ?\n  enhancedWorkflows.reduce((sum, w) => sum + w.avg_runtime_seconds, 0) / enhancedWorkflows.length : 0;\n\nconst systemOverview = {\n  total_workflows: totalWorkflows,\n  active_workflows: activeWorkflows,\n  healthy_workflows: healthyWorkflows,\n  critical_workflows: criticalWorkflows,\n  system_health_score: systemHealthScore,\n  overall_success_rate: overallSuccessRate,\n  total_executions: totalExecutions,\n  total_successful: totalSuccessful,\n  avg_runtime_seconds: Math.round(avgRuntime),\n  system_status: systemHealthScore >= 80 ? 'excellent' : \n                 systemHealthScore >= 60 ? 'good' : \n                 systemHealthScore >= 40 ? 'warning' : 'critical',\n  last_updated: new Date().toISOString()\n};\n\n// Performance metrics for charts\nconst performanceMetrics = {\n  execution_trend: originalData.execution_trend,\n  workflow_health_distribution: {\n    healthy: healthyWorkflows,\n    warning: enhancedWorkflows.filter(w => \n      w.health_score >= 60 && w.health_score < 80\n    ).length,\n    degraded: enhancedWorkflows.filter(w => \n      w.health_score >= 40 && w.health_score < 60\n    ).length,\n    critical: criticalWorkflows\n  },\n  resource_usage: {\n    avg_runtime: avgRuntime,\n    peak_hours: ['09:00', '14:00', '18:00'],\n    execution_frequency: totalExecutions / 7\n  }\n};\n\n// Plan-specific data filtering\nif (originalData.user_plan !== 'premium') {\n  // Limit data for non-premium users\n  enhancedWorkflows.forEach(workflow => {\n    delete workflow.performance;\n    workflow.limited_data = true;\n  });\n  \n  allAlerts.splice(5); // Limit to 5 alerts\n  allRecommendations.splice(3); // Limit to 3 recommendations\n}\n\nconst finalData = {\n  ...originalData,\n  workflows: enhancedWorkflows,\n  system_overview: systemOverview,\n  alerts: allAlerts,\n  recommendations: allRecommendations,\n  performance_metrics: performanceMetrics,\n  monitoring_metadata: {\n    timestamp: new Date().toISOString(),\n    monitoring_type: originalData.monitoring_type,\n    user_plan: originalData.user_plan,\n    workflows_monitored: totalWorkflows,\n    data_sources: ['n8n_api', 'workflow_executions', 'active_workflows'],\n    refresh_interval: originalData.refresh_interval,\n    execution_id: originalData.execution_id,\n    workflow_id: originalData.workflow_id\n  }\n};\n\nreturn [{ json: finalData }];"
      },
      "id": "generate-system-overview",
      "name": "Generate System Overview",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2100, 350]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "delivery_method",
              "value": "webhook"
            },
            {
              "name": "webhook_url",
              "value": "={{$json.dashboard_webhook}}"
            },
            {
              "name": "content_type",
              "value": "application/json"
            },
            {
              "name": "timestamp",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        }
      },
      "id": "prepare-delivery-config",
      "name": "Prepare Delivery Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [2300, 350]
    },
    {
      "parameters": {
        "url": "={{$json.dashboard_webhook}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Workflow-Source",
              "value": "n8n-status-monitor"
            },
            {
              "name": "X-Timestamp",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "workflows",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.workflows)}}"
            },
            {
              "name": "system_overview",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.system_overview)}}"
            },
            {
              "name": "alerts",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.alerts)}}"
            },
            {
              "name": "recommendations",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.recommendations)}}"
            },
            {
              "name": "performance_metrics",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.performance_metrics)}}"
            },
            {
              "name": "monitoring_metadata",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.monitoring_metadata)}}"
            },
            {
              "name": "premium_features",
              "value": "={{JSON.stringify($('Generate System Overview').first().json.premium_features)}}"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3
          }
        }
      },
      "id": "send-to-dashboard",
      "name": "Send to Dashboard",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2500, 350]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Workflow status monitoring completed successfully"
            },
            {
              "name": "workflows_monitored",
              "value": "={{$('Generate System Overview').first().json.workflows.length}}"
            },
            {
              "name": "system_health_score",
              "value": "={{$('Generate System Overview').first().json.system_overview.system_health_score}}"
            },
            {
              "name": "alerts_generated",
              "value": "={{$('Generate System Overview').first().json.alerts.length}}"
            },
            {
              "name": "timestamp",
              "value": "={{new Date().toISOString()}}"
            },
            {
              "name": "execution_id",
              "value": "={{$execution.id}}"
            }
          ]
        }
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [2700, 350]
    },
    {
      "parameters": {
        "jsCode": "const errorData = $input.first().json;\nconst timestamp = new Date().toISOString();\n\n// Determine error type and severity\nlet errorType = 'unknown_error';\nlet severity = 'medium';\nlet message = 'An error occurred during workflow status monitoring';\n\nif (errorData.error) {\n  message = errorData.error.message || message;\n  \n  if (errorData.error.code) {\n    if (errorData.error.code.includes('ECONNREFUSED') || errorData.error.code.includes('TIMEOUT')) {\n      errorType = 'api_connection_error';\n      severity = 'high';\n      message = 'Unable to connect to n8n API';\n    } else if (errorData.error.code.includes('401') || errorData.error.code.includes('403')) {\n      errorType = 'authentication_error';\n      severity = 'high';\n      message = 'API authentication failed';\n    } else if (errorData.error.code.includes('404')) {\n      errorType = 'api_not_found';\n      severity = 'medium';\n      message = 'n8n API endpoint not found';\n    }\n  }\n}\n\n// Generate fallback data for frontend\nconst fallbackData = {\n  workflows: [],\n  system_overview: {\n    total_workflows: 0,\n    active_workflows: 0,\n    healthy_workflows: 0,\n    critical_workflows: 0,\n    system_health_score: 0,\n    system_status: 'error',\n    last_updated: timestamp,\n    error_state: true\n  },\n  alerts: [\n    {\n      type: errorType,\n      message: message,\n      severity: severity,\n      timestamp: timestamp,\n      workflow_name: 'System Monitor'\n    }\n  ],\n  recommendations: [\n    {\n      type: 'system_check',\n      message: 'Check n8n API connectivity and credentials',\n      priority: 'high',\n      workflow_name: 'System Monitor'\n    }\n  ],\n  performance_metrics: {\n    execution_trend: [],\n    workflow_health_distribution: {\n      healthy: 0,\n      warning: 0,\n      degraded: 0,\n      critical: 0\n    }\n  },\n  monitoring_metadata: {\n    timestamp: timestamp,\n    error_state: true,\n    error_type: errorType,\n    error_message: message,\n    execution_id: $execution.id,\n    workflow_id: $workflow.id\n  }\n};\n\nreturn [{ \n  json: {\n    error: true,\n    error_type: errorType,\n    error_message: message,\n    severity: severity,\n    timestamp: timestamp,\n    fallback_data: fallbackData,\n    execution_id: $execution.id\n  }\n}];"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 600]
    },
    {
      "parameters": {
        "url": "={{$json.fallback_data.monitoring_metadata.dashboard_webhook || $env.DASHBOARD_WEBHOOK_URL || 'http://localhost:3001/api/webhooks/workflow-status'}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Workflow-Source",
              "value": "n8n-status-monitor-error"
            },
            {
              "name": "X-Error-State",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error_state",
              "value": true
            },
            {
              "name": "workflows",
              "value": "={{JSON.stringify($json.fallback_data.workflows)}}"
            },
            {
              "name": "system_overview",
              "value": "={{JSON.stringify($json.fallback_data.system_overview)}}"
            },
            {
              "name": "alerts",
              "value": "={{JSON.stringify($json.fallback_data.alerts)}}"
            },
            {
              "name": "recommendations",
              "value": "={{JSON.stringify($json.fallback_data.recommendations)}}"
            },
            {
              "name": "monitoring_metadata",
              "value": "={{JSON.stringify($json.fallback_data.monitoring_metadata)}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-error-to-dashboard",
      "name": "Send Error to Dashboard",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1500, 600]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "error"
            },
            {
              "name": "message",
              "value": "={{$json.error_message}}"
            },
            {
              "name": "error_type",
              "value": "={{$json.error_type}}"
            },
            {
              "name": "severity",
              "value": "={{$json.severity}}"
            },
            {
              "name": "timestamp",
              "value": "={{$json.timestamp}}"
            },
            {
              "name": "execution_id",
              "value": "={{$json.execution_id}}"
            },
            {
              "name": "fallback_sent",
              "value": "true"
            }
          ]
        }
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1700, 600]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "unauthorized"
            },
            {
              "name": "message",
              "value": "API credentials not configured or invalid"
            },
            {
              "name": "error_code",
              "value": "MISSING_API_CREDENTIALS"
            },
            {
              "name": "timestamp",
              "value": "={{new Date().toISOString()}}"
            },
            {
              "name": "required_env_vars",
              "value": "N8N_API_KEY, N8N_API_BASE_URL"
            }
          ]
        }
      },
      "id": "credentials-error-response",
      "name": "Credentials Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [700, 600]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "limited"
            },
            {
              "name": "message",
              "value": "Basic plan - limited workflow monitoring available"
            },
            {
              "name": "monitoring_frequency",
              "value": "15 minutes"
            },
            {
              "name": "upgrade_url",
              "value": "/upgrade-to-premium"
            },
            {
              "name": "limitations",
              "value": "Limited to 50 execution records, basic health monitoring only"
            },
            {
              "name": "timestamp",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        }
      },
      "id": "basic-plan-response",
      "name": "Basic Plan Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [700, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[
        {
          "node": "Input Validator",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Input Validator": {
      "main": [[
        {
          "node": "API Credentials Check",
          "type": "main",
          "index": 0
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "API Credentials Check": {
      "main": [
        [
          {
            "node": "User Plan Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Credentials Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Plan Check": {
      "main": [
        [
          {
            "node": "Fetch Workflows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Executions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Active Workflows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Workflow Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic Plan Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Workflows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Executions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Active Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Workflows": {
      "main": [[
        {
          "node": "Merge API Data",
          "type": "main",
          "index": 0
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Fetch Executions": {
      "main": [[
        {
          "node": "Merge API Data",
          "type": "main",
          "index": 1
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Fetch Active Workflows": {
      "main": [[
        {
          "node": "Merge API Data",
          "type": "main",
          "index": 2
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Fetch Workflow Details": {
      "main": [[
        {
          "node": "Merge API Data",
          "type": "main",
          "index": 3
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Merge API Data": {
      "main": [[
        {
          "node": "Process Workflow Data",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Process Workflow Data": {
      "main": [[
        {
          "node": "Split Workflows",
          "type": "main",
          "index": 0
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Split Workflows": {
      "main": [[
        {
          "node": "Enhance Workflow Data",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Enhance Workflow Data": {
      "main": [[
        {
          "node": "Aggregate Enhanced Workflows",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Aggregate Enhanced Workflows": {
      "main": [[
        {
          "node": "Generate System Overview",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Generate System Overview": {
      "main": [[
        {
          "node": "Prepare Delivery Config",
          "type": "main",
          "index": 0
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Prepare Delivery Config": {
      "main": [[
        {
          "node": "Send to Dashboard",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Send to Dashboard": {
      "main": [[
        {
          "node": "Success Response",
          "type": "main",
          "index": 0
        }
      ]],
      "error": [[
        {
          "node": "Error Handler",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Error Handler": {
      "main": [[
        {
          "node": "Send Error to Dashboard",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Send Error to Dashboard": {
      "main": [[
        {
          "node": "Error Response",
          "type": "main",
          "index": 0
        }
      ]],
      "error": [[
        {
          "node": "Error Response",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Success Response": {
      "main": []
    },
    "Error Response": {
      "main": []
    },
    "Credentials Error Response": {
      "main": []
    },
    "Basic Plan Response": {
      "main": []
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "callerPolicy": "workflowsFromSameOwner",
    "timezone": "America/New_York",
    "executionTimeout": 1800,
    "maxExecutionTimeout": 3600
  },
  "staticData": {
    "node:Webhook Trigger": {
      "webhookId": "workflow-status-monitoring-v2"
    }
  },
  "tags": [
    {
      "createdAt": "2025-01-21T10:00:00.000Z",
      "updatedAt": "2025-01-21T10:00:00.000Z",
      "id": "workflow-monitoring-v2",
      "name": "Workflow Monitoring v2"
    },
    {
      "createdAt": "2025-01-21T10:00:00.000Z",
      "updatedAt": "2025-01-21T10:00:00.000Z",
      "id": "dashboard-integration",
      "name": "Dashboard Integration"
    },
    {
      "createdAt": "2025-01-21T10:00:00.000Z",
      "updatedAt": "2025-01-21T10:00:00.000Z",
      "id": "production-ready",
      "name": "Production Ready"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-21T10:00:00.000Z",
  "versionId": "v2.0.0",
  "meta": {
    "description": "Advanced workflow status monitoring system with comprehensive error handling, data processing, and frontend integration for dashboard workflows.",
    "version": "2.0.0",
    "author": "Claude Code Assistant",
    "features": [
      "Multi-layer input validation and sanitization",
      "Comprehensive API credential checking",
      "Plan-based feature limitations (Basic vs Premium)",
      "Parallel API data collection with merge operations",
      "Advanced workflow data processing and enhancement",
      "Split-transform-aggregate pattern for scalability",
      "Real-time health scoring and performance metrics",
      "Automated alert and recommendation generation",
      "Comprehensive error handling with fallback data",
      "Frontend-compatible webhook delivery",
      "Retry mechanisms and timeout configurations",
      "Production-ready monitoring and logging"
    ],
    "environmentVariables": [
      "N8N_API_KEY",
      "N8N_API_BASE_URL",
      "DASHBOARD_WEBHOOK_URL"
    ],
    "webhookEndpoints": [
      "/workflow-status-monitor"
    ],
    "compatibleWith": {
      "frontend": "Dashboard v2.x",
      "n8n": "1.x+",
      "api": "n8n API v1.x"
    },
    "nodeTypes": {
      "input": ["webhook", "validator"],
      "processing": ["split", "enhance", "aggregate", "merge"],
      "output": ["webhook", "response"],
      "utility": ["set", "if", "code"],
      "error_handling": ["error_handler", "fallback"]
    }
  }
}