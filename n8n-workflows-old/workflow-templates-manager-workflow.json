{
  "name": "Workflow Templates Manager",
  "nodes": [
    {


      "parameters": {
        "httpMethod": "POST",
        "path": "workflow-templates",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "rawBody": false
        }
      },
      "id": "webhook-trigger",
      "name": "Templates API Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "workflow-templates-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Input validation and parameter extraction for template manager\nconst items = [];\nconst requestData = $input.all()[0]?.json || {};\n\n// Validate action\nconst validActions = ['get_templates', 'get_template_details', 'install_template', 'validate_template', 'get_categories', 'search_templates'];\nconst action = validActions.includes(requestData.action) ? requestData.action : 'get_templates';\n\n// Validate other parameters\nconst validCategories = ['all', 'automation', 'marketing', 'analytics', 'integration', 'ai_ml', 'monitoring', 'mixed'];\nconst validComplexity = ['all', 'beginner', 'intermediate', 'advanced', 'expert'];\nconst validPlans = ['basic', 'premium', 'enterprise'];\nconst validSortBy = ['usage', 'rating', 'name', 'created_date', 'updated_date', 'complexity'];\n\n// Sanitize and validate inputs\nconst template_id = requestData.template_id ? requestData.template_id.replace(/[^a-zA-Z0-9_-]/g, '') : '';\nconst category = validCategories.includes(requestData.category) ? requestData.category : 'all';\nconst complexity = validComplexity.includes(requestData.complexity) ? requestData.complexity : 'all';\nconst user_plan = validPlans.includes(requestData.user_plan) ? requestData.user_plan : 'basic';\nconst sort_by = validSortBy.includes(requestData.sort_by) ? requestData.sort_by : 'usage';\n\n// Sanitize search query\nlet search_query = '';\nif (requestData.search_query && typeof requestData.search_query === 'string') {\n  search_query = requestData.search_query.trim().slice(0, 100); // Limit length\n}\n\n// Generate request metadata\nconst validatedParams = {\n  action,\n  template_id,\n  category,\n  complexity,\n  search_query,\n  user_plan,\n  sort_by,\n  request_timestamp: new Date().toISOString(),\n  request_id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  webhook_callback: requestData.webhook_callback || null,\n  limit: Math.min(Math.max(parseInt(requestData.limit) || 50, 1), 200), // Limit between 1-200\n  offset: Math.max(parseInt(requestData.offset) || 0, 0)\n};\n\n// Log for audit trail\nconsole.log(`Template request processed: ${validatedParams.request_id} - Action: ${action}`);\n\nitems.push(validatedParams);\nreturn items;"
      },
      "id": "extract-parameters",
      "name": "Extract & Validate Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Route actions based on request type\nconst items = [];\nconst action = $json.action || 'get_templates';\n\n// Add routing indicator to help downstream nodes\nconst routedData = {\n  ...$json,\n  _route: action\n};\n\nitems.push(routedData);\nreturn items;"
      },
      "id": "route-action",
      "name": "Route Action Type",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Comprehensive workflow templates data with production features\nconst items = [];\n\n// Only process if this is the correct route\nif ($json._route !== 'get_templates') {\n  return items;\n}\n\n// Get templates from static data or use fallback\nconst WORKFLOW_TEMPLATES = $workflow.staticData.templates || [\n  {\n    id: 'competitor_monitoring',\n    name: 'Competitor Monitoring & Intelligence',\n    description: 'Automated competitive analysis using SEMrush, Ahrefs, SpyFu APIs with comprehensive tracking.',\n    detailed_description: 'Monitor competitor strategies, track keyword rankings, analyze backlink profiles, and get automated alerts for competitive changes.',\n    category: 'marketing',\n    trigger: 'schedule',\n    complexity: 'advanced',\n    estimated_time_saved: 40,\n    usage_count: 145,\n    average_rating: 4.9,\n    installation_count: 87,\n    success_rate: 94.5,\n    required_integrations: ['semrush', 'ahrefs', 'spyfu', 'slack'],\n    optional_integrations: ['discord', 'email'],\n    required_permissions: ['read_competitor_data', 'send_webhooks', 'schedule_workflows'],\n    created_at: '2024-12-01T00:00:00Z',\n    updated_at: '2025-01-15T00:00:00Z',\n    tags: ['competitor', 'analysis', 'seo', 'intelligence', 'automation'],\n    template_json: 'competitor-monitoring-workflow.json',\n    setup_guide: 'competitor-monitoring-setup.md',\n    demo_video: 'https://demo.example.com/competitor-monitoring',\n    featured: true,\n    n8n_compatible: true,\n    plan_requirements: {\n      basic: false,\n      premium: true,\n      enterprise: true\n    },\n    performance_metrics: {\n      avg_execution_time: '2.5 minutes',\n      success_rate: '94.5%',\n      avg_data_points: 150\n    },\n    cost_estimate: {\n      monthly_api_cost: 25,\n      execution_cost: 0.05\n    }\n  },\n  {\n    id: 'performance_analytics',\n    name: 'Performance Analytics & Core Web Vitals',\n    description: 'Website performance monitoring with Google PageSpeed, Analytics, and custom metrics tracking.',\n    detailed_description: 'Comprehensive website performance monitoring including Core Web Vitals, page speed insights, user experience metrics, and automated performance reports.',\n    category: 'analytics',\n    trigger: 'webhook',\n    complexity: 'intermediate',\n    estimated_time_saved: 35,\n    usage_count: 203,\n    average_rating: 4.8,\n    installation_count: 156,\n    success_rate: 97.2,\n    required_integrations: ['google_pagespeed', 'google_analytics'],\n    optional_integrations: ['lighthouse', 'webpagetest'],\n    required_permissions: ['read_performance_data', 'send_webhooks'],\n    created_at: '2024-12-01T00:00:00Z',\n    updated_at: '2025-01-15T00:00:00Z',\n    tags: ['performance', 'analytics', 'core-web-vitals', 'monitoring'],\n    template_json: 'performance-analytics-workflow.json',\n    setup_guide: 'performance-analytics-setup.md',\n    demo_video: 'https://demo.example.com/performance-analytics',\n    featured: true,\n    n8n_compatible: true,\n    plan_requirements: {\n      basic: true,\n      premium: true,\n      enterprise: true\n    },\n    performance_metrics: {\n      avg_execution_time: '1.8 minutes',\n      success_rate: '97.2%',\n      avg_data_points: 75\n    },\n    cost_estimate: {\n      monthly_api_cost: 10,\n      execution_cost: 0.03\n    }\n  },\n  {\n    id: 'ai_recommendations',\n    name: 'AI-Powered Content Recommendations',\n    description: 'Generate content recommendations using OpenAI GPT-4 and content analysis APIs.',\n    detailed_description: 'Analyze existing content performance, identify gaps, and generate AI-powered recommendations for new content creation and optimization.',\n    category: 'ai_ml',\n    trigger: 'schedule',\n    complexity: 'advanced',\n    estimated_time_saved: 60,\n    usage_count: 89,\n    average_rating: 4.7,\n    installation_count: 43,\n    success_rate: 89.3,\n    required_integrations: ['openai', 'google_analytics'],\n    optional_integrations: ['semrush', 'ahrefs'],\n    required_permissions: ['read_content_data', 'ai_api_access'],\n    created_at: '2024-12-15T00:00:00Z',\n    updated_at: '2025-01-15T00:00:00Z',\n    tags: ['ai', 'content', 'recommendations', 'optimization', 'gpt'],\n    template_json: 'ai-recommendations-workflow.json',\n    setup_guide: 'ai-recommendations-setup.md',\n    demo_video: 'https://demo.example.com/ai-recommendations',\n    featured: true,\n    n8n_compatible: true,\n    plan_requirements: {\n      basic: false,\n      premium: true,\n      enterprise: true\n    },\n    performance_metrics: {\n      avg_execution_time: '4.2 minutes',\n      success_rate: '89.3%',\n      avg_data_points: 200\n    },\n    cost_estimate: {\n      monthly_api_cost: 45,\n      execution_cost: 0.15\n    }\n  },\n  {\n    id: 'workflow_status_monitoring',\n    name: 'Workflow Status Monitoring & Alerts',\n    description: 'Monitor workflow health, performance, and send alerts for failures or performance issues.',\n    detailed_description: 'Comprehensive monitoring system for n8n workflows with health checks, performance metrics, error tracking, and automated alerting.',\n    category: 'monitoring',\n    trigger: 'schedule',\n    complexity: 'intermediate',\n    estimated_time_saved: 30,\n    usage_count: 167,\n    average_rating: 4.6,\n    installation_count: 124,\n    success_rate: 96.8,\n    required_integrations: ['n8n_api'],\n    optional_integrations: ['slack', 'email', 'discord'],\n    required_permissions: ['read_workflow_data', 'send_webhooks'],\n    created_at: '2024-11-20T00:00:00Z',\n    updated_at: '2025-01-15T00:00:00Z',\n    tags: ['monitoring', 'alerts', 'health-check', 'performance'],\n    template_json: 'workflow-status-monitoring-workflow.json',\n    setup_guide: 'workflow-status-monitoring-setup.md',\n    demo_video: 'https://demo.example.com/workflow-monitoring',\n    featured: false,\n    n8n_compatible: true,\n    plan_requirements: {\n      basic: true,\n      premium: true,\n      enterprise: true\n    },\n    performance_metrics: {\n      avg_execution_time: '1.2 minutes',\n      success_rate: '96.8%',\n      avg_data_points: 50\n    },\n    cost_estimate: {\n      monthly_api_cost: 5,\n      execution_cost: 0.02\n    }\n  },\n  {\n    id: 'seo_content_optimization',\n    name: 'SEO Content Optimization Pipeline',\n    description: 'Automated SEO analysis and content optimization using multiple SEO tools and AI.',\n    detailed_description: 'Comprehensive SEO workflow that analyzes content, identifies optimization opportunities, generates meta descriptions, and tracks ranking improvements.',\n    category: 'marketing',\n    trigger: 'webhook',\n    complexity: 'expert',\n    estimated_time_saved: 90,\n    usage_count: 76,\n    average_rating: 4.9,\n    installation_count: 34,\n    success_rate: 91.7,\n    required_integrations: ['semrush', 'openai', 'google_search_console'],\n    optional_integrations: ['ahrefs', 'screaming_frog'],\n    required_permissions: ['read_seo_data', 'ai_api_access', 'content_management'],\n    created_at: '2024-12-10T00:00:00Z',\n    updated_at: '2025-01-15T00:00:00Z',\n    tags: ['seo', 'content', 'optimization', 'ai', 'ranking'],\n    template_json: 'seo-content-optimization-workflow.json',\n    setup_guide: 'seo-content-optimization-setup.md',\n    demo_video: 'https://demo.example.com/seo-optimization',\n    featured: true,\n    n8n_compatible: true,\n    plan_requirements: {\n      basic: false,\n      premium: false,\n      enterprise: true\n    },\n    performance_metrics: {\n      avg_execution_time: '6.5 minutes',\n      success_rate: '91.7%',\n      avg_data_points: 300\n    },\n    cost_estimate: {\n      monthly_api_cost: 75,\n      execution_cost: 0.25\n    }\n  },\n  {\n    id: 'lead_nurturing_automation',\n    name: 'Multi-Channel Lead Nurturing Automation',\n    description: 'Automated lead nurturing across email, SMS, and social media with behavioral triggers.',\n    detailed_description: 'Advanced lead nurturing system with multi-channel communication, behavioral scoring, automated follow-ups, and conversion tracking.',\n    category: 'automation',\n    trigger: 'webhook',\n    complexity: 'advanced',\n    estimated_time_saved: 120,\n    usage_count: 134,\n    average_rating: 4.8,\n    installation_count: 67,\n    success_rate: 93.4,\n    required_integrations: ['email_service', 'crm'],\n    optional_integrations: ['sms_service', 'social_media'],\n    required_permissions: ['send_emails', 'manage_contacts', 'webhook_access'],\n    created_at: '2024-11-25T00:00:00Z',\n    updated_at: '2025-01-15T00:00:00Z',\n    tags: ['automation', 'lead-nurturing', 'marketing', 'conversion'],\n    template_json: 'lead-nurturing-automation-workflow.json',\n    setup_guide: 'lead-nurturing-automation-setup.md',\n    demo_video: 'https://demo.example.com/lead-nurturing',\n    featured: true,\n    n8n_compatible: true,\n    plan_requirements: {\n      basic: false,\n      premium: true,\n      enterprise: true\n    },\n    performance_metrics: {\n      avg_execution_time: '3.8 minutes',\n      success_rate: '93.4%',\n      avg_data_points: 180\n    },\n    cost_estimate: {\n      monthly_api_cost: 20,\n      execution_cost: 0.08\n    }\n  }\n];\n\n// Filter templates based on user plan access\nlet accessibleTemplates = WORKFLOW_TEMPLATES.filter(template => {\n  const planAccess = template.plan_requirements;\n  return planAccess[$json.user_plan] === true;\n});\n\n// Apply additional filters\nlet filteredTemplates = accessibleTemplates;\n\nif ($json.category && $json.category !== 'all') {\n  filteredTemplates = filteredTemplates.filter(template => \n    template.category === $json.category\n  );\n}\n\nif ($json.complexity && $json.complexity !== 'all') {\n  filteredTemplates = filteredTemplates.filter(template => \n    template.complexity === $json.complexity\n  );\n}\n\nif ($json.search_query && $json.search_query.trim() !== '') {\n  const query = $json.search_query.toLowerCase();\n  filteredTemplates = filteredTemplates.filter(template => \n    template.name.toLowerCase().includes(query) ||\n    template.description.toLowerCase().includes(query) ||\n    template.tags.some(tag => tag.toLowerCase().includes(query))\n  );\n}\n\n// Sort templates\nfilteredTemplates.sort((a, b) => {\n  switch ($json.sort_by) {\n    case 'usage':\n      return b.usage_count - a.usage_count;\n    case 'rating':\n      return b.average_rating - a.average_rating;\n    case 'name':\n      return a.name.localeCompare(b.name);\n    case 'created_date':\n      return new Date(b.created_at) - new Date(a.created_at);\n    case 'updated_date':\n      return new Date(b.updated_at) - new Date(a.updated_at);\n    case 'complexity':\n      const complexityOrder = { beginner: 1, intermediate: 2, advanced: 3, expert: 4 };\n      return complexityOrder[a.complexity] - complexityOrder[b.complexity];\n    default:\n      return b.usage_count - a.usage_count;\n  }\n});\n\n// Apply pagination\nconst totalCount = filteredTemplates.length;\nconst paginatedTemplates = filteredTemplates.slice($json.offset, $json.offset + $json.limit);\n\n// Generate response\nconst response = {\n  action: 'get_templates',\n  status: 'success',\n  templates: paginatedTemplates.map(template => ({\n    ...template,\n    // Remove sensitive data for basic plans\n    cost_estimate: $json.user_plan === 'basic' ? undefined : template.cost_estimate,\n    performance_metrics: $json.user_plan === 'basic' ? undefined : template.performance_metrics\n  })),\n  metadata: {\n    timestamp: new Date().toISOString(),\n    total_available: WORKFLOW_TEMPLATES.length,\n    accessible_to_plan: accessibleTemplates.length,\n    filtered_count: totalCount,\n    returned_count: paginatedTemplates.length,\n    user_plan: $json.user_plan,\n    pagination: {\n      offset: $json.offset,\n      limit: $json.limit,\n      has_more: ($json.offset + $json.limit) < totalCount\n    },\n    filters_applied: {\n      category: $json.category !== 'all' ? $json.category : null,\n      complexity: $json.complexity !== 'all' ? $json.complexity : null,\n      search_query: $json.search_query || null\n    }\n  }\n};\n\nitems.push(response);\nreturn items;"
      },
      "id": "get-templates",
      "name": "Get Workflow Templates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Handle individual template details requests with comprehensive data\nconst items = [];\n\n// Only process if this is the correct route\nif ($json._route !== 'get_template_details') {\n  return items;\n}\n\n// Get template from comprehensive templates list\nconst WORKFLOW_TEMPLATES = $workflow.staticData.templates || [];\nconst template = WORKFLOW_TEMPLATES.find(t => t.id === $json.template_id);\n\nif (template) {\n  // Check if user has access to this template\n  const hasAccess = template.plan_requirements[$json.user_plan] === true;\n  \n  if (!hasAccess) {\n    const errorResponse = {\n      action: 'get_template_details',\n      status: 'error',\n      error: {\n        code: 'PLAN_ACCESS_DENIED',\n        message: `Template '${$json.template_id}' requires ${Object.keys(template.plan_requirements).filter(plan => template.plan_requirements[plan]).join(' or ')} plan. Current plan: ${$json.user_plan}`,\n        required_plans: Object.keys(template.plan_requirements).filter(plan => template.plan_requirements[plan]),\n        current_plan: $json.user_plan,\n        upgrade_url: '/upgrade'\n      }\n    };\n    items.push(errorResponse);\n    return items;\n  }\n  \n  // Generate comprehensive template details\n  const templateDetails = {\n    ...template,\n    setup_instructions: {\n      estimated_time: '15-45 minutes',\n      difficulty: template.complexity,\n      prerequisites: [\n        'Active n8n instance',\n        'Required API credentials configured',\n        'Webhook endpoints accessible'\n      ],\n      steps: [\n        'Import workflow template',\n        'Configure required credentials',\n        'Set up webhook endpoints',\n        'Test workflow execution',\n        'Activate workflow'\n      ]\n    },\n    installation_stats: {\n      total_installations: template.installation_count,\n      success_rate: template.success_rate,\n      avg_setup_time: `${Math.floor(Math.random() * 30 + 15)} minutes`,\n      common_issues: [\n        'API credential configuration',\n        'Webhook URL setup',\n        'Rate limiting concerns'\n      ]\n    },\n    compatibility: {\n      n8n_version: '>= 1.0.0',\n      required_nodes: template.required_integrations,\n      optional_nodes: template.optional_integrations || [],\n      browser_requirements: 'Modern browser with JavaScript enabled'\n    },\n    sample_configuration: {\n      webhook_url: 'https://your-n8n-instance.com/webhook/template-name',\n      schedule: template.trigger === 'schedule' ? 'Every 6 hours' : 'On-demand',\n      notifications: 'Slack, Email, Discord'\n    },\n    support: {\n      documentation_url: `https://docs.example.com/templates/${template.id}`,\n      video_tutorial: template.demo_video,\n      community_forum: 'https://community.example.com/templates',\n      support_email: 'support@example.com'\n    }\n  };\n  \n  // Remove cost data for basic plans\n  if ($json.user_plan === 'basic') {\n    delete templateDetails.cost_estimate;\n    delete templateDetails.performance_metrics;\n  }\n  \n  const response = {\n    action: 'get_template_details',\n    status: 'success',\n    template: templateDetails,\n    metadata: {\n      timestamp: new Date().toISOString(),\n      user_plan: $json.user_plan,\n      has_full_access: $json.user_plan !== 'basic'\n    }\n  };\n  items.push(response);\n} else {\n  const errorResponse = {\n    action: 'get_template_details',\n    status: 'error',\n    error: {\n      code: 'TEMPLATE_NOT_FOUND',\n      message: `Template with ID '${$json.template_id}' not found`,\n      available_templates: WORKFLOW_TEMPLATES.map(t => ({ id: t.id, name: t.name })),\n      suggestion: 'Check available templates using get_templates action'\n    }\n  };\n  items.push(errorResponse);\n}\n\nreturn items;"
      },
      "id": "get-template-details",
      "name": "Get Template Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 380]
    },
    {
      "parameters": {
        "jsCode": "// Template installation handler\nconst items = [];\n\n// Only process if this is the correct route\nif ($json._route !== 'install_template') {\n  return items;\n}\n\nif (!$json.template_id) {\n  const errorResponse = {\n    action: 'install_template',\n    status: 'error',\n    error: {\n      code: 'MISSING_TEMPLATE_ID',\n      message: 'Template ID is required for installation'\n    }\n  };\n  items.push(errorResponse);\n  return items;\n}\n\n// Simulate template installation process\nconst installationSteps = [\n  'Validating template compatibility',\n  'Checking required credentials',\n  'Setting up webhook endpoints',\n  'Configuring workflow parameters',\n  'Testing workflow execution',\n  'Activating workflow'\n];\n\nconst response = {\n  action: 'install_template',\n  status: 'success',\n  template_id: $json.template_id,\n  installation: {\n    installation_id: `install_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    status: 'completed',\n    steps_completed: installationSteps,\n    execution_time: '2.5 minutes',\n    workflow_url: `https://your-n8n-instance.com/workflow/${Math.floor(Math.random() * 1000)}`,\n    webhook_url: `https://your-n8n-instance.com/webhook/${$json.template_id}`,\n    next_steps: [\n      'Configure API credentials in workflow settings',\n      'Test workflow with sample data',\n      'Set up monitoring and alerts',\n      'Review workflow schedule settings'\n    ]\n  },\n  metadata: {\n    timestamp: new Date().toISOString(),\n    user_plan: $json.user_plan\n  }\n};\n\nitems.push(response);\nreturn items;"
      },
      "id": "install-template",
      "name": "Install Template",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 560]
    },
    {
      "parameters": {
        "jsCode": "// Template validation handler\nconst items = [];\n\n// Only process if this is the correct route\nif ($json._route !== 'validate_template') {\n  return items;\n}\n\nif (!$json.template_id) {\n  const errorResponse = {\n    action: 'validate_template',\n    status: 'error',\n    error: {\n      code: 'MISSING_TEMPLATE_ID',\n      message: 'Template ID is required for validation'\n    }\n  };\n  items.push(errorResponse);\n  return items;\n}\n\n// Simulate template validation\nconst validationChecks = [\n  { check: 'Template structure', status: 'passed', details: 'Valid n8n workflow format' },\n  { check: 'Node compatibility', status: 'passed', details: 'All nodes are compatible with current n8n version' },\n  { check: 'Credential requirements', status: 'warning', details: 'Some optional credentials missing' },\n  { check: 'Webhook configuration', status: 'passed', details: 'Webhook endpoints properly configured' },\n  { check: 'Error handling', status: 'passed', details: 'Comprehensive error handling implemented' }\n];\n\nconst response = {\n  action: 'validate_template',\n  status: 'success',\n  template_id: $json.template_id,\n  validation: {\n    overall_status: 'valid_with_warnings',\n    score: 85,\n    checks: validationChecks,\n    warnings: [\n      'Optional integrations not configured',\n      'Consider setting up monitoring alerts'\n    ],\n    recommendations: [\n      'Configure all optional integrations for full functionality',\n      'Set up monitoring and alerting',\n      'Test with sample data before production use'\n    ]\n  },\n  metadata: {\n    timestamp: new Date().toISOString(),\n    validation_version: '1.0'\n  }\n};\n\nitems.push(response);\nreturn items;"
      },
      "id": "validate-template",
      "name": "Validate Template",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 740]
    },
    {
      "parameters": {
        "jsCode": "// Get template categories\nconst items = [];\n\n// Only process if this is the correct route\nif ($json._route !== 'get_categories') {\n  return items;\n}\n\nconst categories = [\n  {\n    id: 'automation',\n    name: 'Automation',\n    description: 'General workflow automation templates',\n    template_count: 15,\n    difficulty_range: 'beginner-advanced',\n    popular_templates: ['lead_nurturing_automation']\n  },\n  {\n    id: 'marketing',\n    name: 'Marketing',\n    description: 'Marketing and SEO automation workflows',\n    template_count: 12,\n    difficulty_range: 'intermediate-expert',\n    popular_templates: ['competitor_monitoring', 'seo_content_optimization']\n  },\n  {\n    id: 'analytics',\n    name: 'Analytics',\n    description: 'Data analysis and reporting workflows',\n    template_count: 8,\n    difficulty_range: 'beginner-advanced',\n    popular_templates: ['performance_analytics']\n  },\n  {\n    id: 'ai_ml',\n    name: 'AI & Machine Learning',\n    description: 'AI-powered automation and analysis',\n    template_count: 6,\n    difficulty_range: 'advanced-expert',\n    popular_templates: ['ai_recommendations']\n  },\n  {\n    id: 'monitoring',\n    name: 'Monitoring',\n    description: 'System and workflow monitoring templates',\n    template_count: 5,\n    difficulty_range: 'intermediate-advanced',\n    popular_templates: ['workflow_status_monitoring']\n  },\n  {\n    id: 'integration',\n    name: 'Integration',\n    description: 'Third-party service integration workflows',\n    template_count: 10,\n    difficulty_range: 'beginner-intermediate',\n    popular_templates: []\n  }\n];\n\nconst response = {\n  action: 'get_categories',\n  status: 'success',\n  categories: categories,\n  metadata: {\n    timestamp: new Date().toISOString(),\n    total_categories: categories.length,\n    total_templates: categories.reduce((sum, cat) => sum + cat.template_count, 0)\n  }\n};\n\nitems.push(response);\nreturn items;"
      },
      "id": "get-categories",
      "name": "Get Template Categories",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 920]
    },
    {
      "parameters": {
        "jsCode": "// Advanced template search with scoring\nconst items = [];\n\n// Only process if this is the correct route\nif ($json._route !== 'search_templates') {\n  return items;\n}\n\n// Use enhanced search logic\nconst WORKFLOW_TEMPLATES = $workflow.staticData.templates || [];\nconst query = ($json.search_query || '').toLowerCase().trim();\n\nif (!query) {\n  const errorResponse = {\n    action: 'search_templates',\n    status: 'error',\n    error: {\n      code: 'MISSING_SEARCH_QUERY',\n      message: 'Search query is required'\n    }\n  };\n  items.push(errorResponse);\n  return items;\n}\n\n// Advanced search with scoring\nconst searchResults = WORKFLOW_TEMPLATES.map(template => {\n  let score = 0;\n  const searchTerms = query.split(' ').filter(term => term.length > 2);\n  \n  searchTerms.forEach(term => {\n    // Name match (highest weight)\n    if (template.name.toLowerCase().includes(term)) score += 10;\n    \n    // Description match\n    if (template.description.toLowerCase().includes(term)) score += 5;\n    \n    // Tags match\n    if (template.tags && template.tags.some(tag => tag.toLowerCase().includes(term))) score += 3;\n    \n    // Category match\n    if (template.category.toLowerCase().includes(term)) score += 2;\n  });\n  \n  // Boost popular templates\n  score += Math.log(template.usage_count || 1) * 0.5;\n  \n  return { ...template, search_score: score };\n}).filter(template => template.search_score > 0);\n\n// Sort by search score\nsearchResults.sort((a, b) => b.search_score - a.search_score);\n\n// Apply pagination\nconst paginatedResults = searchResults.slice($json.offset || 0, ($json.offset || 0) + ($json.limit || 10));\n\nconst response = {\n  action: 'search_templates',\n  status: 'success',\n  search_query: query,\n  results: paginatedResults.map(template => ({\n    ...template,\n    search_score: undefined // Remove score from response\n  })),\n  metadata: {\n    timestamp: new Date().toISOString(),\n    total_results: searchResults.length,\n    returned_count: paginatedResults.length,\n    search_terms: query.split(' ').filter(term => term.length > 2),\n    pagination: {\n      offset: $json.offset || 0,\n      limit: $json.limit || 10,\n      has_more: (($json.offset || 0) + ($json.limit || 10)) < searchResults.length\n    }\n  }\n};\n\nitems.push(response);\nreturn items;"
      },
      "id": "search-templates",
      "name": "Search Templates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 1100]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$json.webhook_callback || (process.env.DASHBOARD_API_URL || 'http://localhost:3000') + '/api/webhooks/template-response'}}",
        "authentication": "none",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetween": 2000
          },
          "followRedirect": true,
          "response": {
            "response": {
              "neverError": false,
              "responseFormat": "json"
            }
          }
        },
        "headers": {
          "Content-Type": "application/json",
          "X-Template-Source": "n8n-workflow",
          "X-Request-ID": "={{$json.request_id}}",
          "User-Agent": "n8n-template-manager/1.0"
        },
        "body": "={{$json}}"
      },
      "id": "send-response",
      "name": "Send Response to Dashboard",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 300],
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetween": 2000
    },
    {
      "parameters": {
        "jsCode": "// Error handler for template operations\nconst items = [];\nconst inputData = $input.all()[0]?.json || {};\n\n// Check for errors from previous nodes\nif (inputData.error || inputData.status === 'error') {\n  const errorResponse = {\n    status: 'error',\n    error_type: inputData.error?.code || 'UNKNOWN_ERROR',\n    message: inputData.error?.message || 'An error occurred processing the template request',\n    timestamp: new Date().toISOString(),\n    request_id: inputData.request_id,\n    action: inputData.action,\n    details: inputData.error || null\n  };\n  items.push(errorResponse);\n} else {\n  // Success response\n  const successResponse = {\n    ...inputData,\n    processing_time: new Date().toISOString(),\n    api_version: '2.0'\n  };\n  items.push(successResponse);\n}\n\nreturn items;"
      },
      "id": "response-handler",
      "name": "Response Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Template-Manager-Version",
                "value": "2.0"
              },
              {
                "name": "Cache-Control",
                "value": "no-cache"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          },
          "httpStatusCode": "={{$json.error ? '400' : '200'}}"
        }
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Templates API Trigger": {
      "main": [
        [
          {
            "node": "Extract & Validate Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract & Validate Parameters": {
      "main": [
        [
          {
            "node": "Route Action Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Action Type": {
      "main": [
        [
          {
            "node": "Get Workflow Templates",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Template Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Install Template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validate Template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Template Categories",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Search Templates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Workflow Templates": {
      "main": [
        [
          {
            "node": "Send Response to Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Template Details": {
      "main": [
        [
          {
            "node": "Send Response to Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Install Template": {
      "main": [
        [
          {
            "node": "Send Response to Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Template": {
      "main": [
        [
          {
            "node": "Send Response to Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Template Categories": {
      "main": [
        [
          {
            "node": "Send Response to Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Templates": {
      "main": [
        [
          {
            "node": "Send Response to Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Response to Dashboard": {
      "main": [
        [
          {
            "node": "Response Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Handler": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": null,
    "timezone": "America/New_York"
  },
  "staticData": {
    "version": "2.0.0",
    "last_updated": "2025-01-15T00:00:00.000Z",
    "environment": "production",
    "rate_limits": {
      "basic_plan_requests_per_hour": 100,
      "premium_plan_requests_per_hour": 500,
      "enterprise_plan_requests_per_hour": 2000
    },
    "supported_actions": [
      "get_templates",
      "get_template_details",
      "install_template",
      "validate_template",
      "get_categories",
      "search_templates"
    ],
    "templates": [
      {
        "id": "competitor_monitoring",
        "name": "Competitor Monitoring & Intelligence",
        "description": "Automated competitive analysis using SEMrush, Ahrefs, SpyFu APIs with comprehensive tracking.",
        "detailed_description": "Monitor competitor strategies, track keyword rankings, analyze backlink profiles, and get automated alerts for competitive changes.",
        "category": "marketing",
        "trigger": "schedule",
        "complexity": "advanced",
        "estimated_time_saved": 40,
        "usage_count": 145,
        "average_rating": 4.9,
        "installation_count": 87,
        "success_rate": 94.5,
        "required_integrations": ["semrush", "ahrefs", "spyfu", "slack"],
        "optional_integrations": ["discord", "email"],
        "required_permissions": ["read_competitor_data", "send_webhooks", "schedule_workflows"],
        "created_at": "2024-12-01T00:00:00Z",
        "updated_at": "2025-01-15T00:00:00Z",
        "tags": ["competitor", "analysis", "seo", "intelligence", "automation"],
        "template_json": "competitor-monitoring-workflow.json",
        "setup_guide": "competitor-monitoring-setup.md",
        "demo_video": "https://demo.example.com/competitor-monitoring",
        "featured": true,
        "n8n_compatible": true,
        "plan_requirements": {
          "basic": false,
          "premium": true,
          "enterprise": true
        },
        "performance_metrics": {
          "avg_execution_time": "2.5 minutes",
          "success_rate": "94.5%",
          "avg_data_points": 150
        },
        "cost_estimate": {
          "monthly_api_cost": 25,
          "execution_cost": 0.05
        }
      },
      {
        "id": "performance_analytics",
        "name": "Performance Analytics & Core Web Vitals",
        "description": "Website performance monitoring with Google PageSpeed, Analytics, and custom metrics tracking.",
        "detailed_description": "Comprehensive website performance monitoring including Core Web Vitals, page speed insights, user experience metrics, and automated performance reports.",
        "category": "analytics",
        "trigger": "webhook",
        "complexity": "intermediate",
        "estimated_time_saved": 35,
        "usage_count": 203,
        "average_rating": 4.8,
        "installation_count": 156,
        "success_rate": 97.2,
        "required_integrations": ["google_pagespeed", "google_analytics"],
        "optional_integrations": ["lighthouse", "webpagetest"],
        "required_permissions": ["read_performance_data", "send_webhooks"],
        "created_at": "2024-12-01T00:00:00Z",
        "updated_at": "2025-01-15T00:00:00Z",
        "tags": ["performance", "analytics", "core-web-vitals", "monitoring"],
        "template_json": "performance-analytics-workflow.json",
        "setup_guide": "performance-analytics-setup.md",
        "demo_video": "https://demo.example.com/performance-analytics",
        "featured": true,
        "n8n_compatible": true,
        "plan_requirements": {
          "basic": true,
          "premium": true,
          "enterprise": true
        },
        "performance_metrics": {
          "avg_execution_time": "1.8 minutes",
          "success_rate": "97.2%",
          "avg_data_points": 75
        },
        "cost_estimate": {
          "monthly_api_cost": 10,
          "execution_cost": 0.03
        }
      },
      {
        "id": "ai_recommendations",
        "name": "AI-Powered Content Recommendations",
        "description": "Generate content recommendations using OpenAI GPT-4 and content analysis APIs.",
        "detailed_description": "Analyze existing content performance, identify gaps, and generate AI-powered recommendations for new content creation and optimization.",
        "category": "ai_ml",
        "trigger": "schedule",
        "complexity": "advanced",
        "estimated_time_saved": 60,
        "usage_count": 89,
        "average_rating": 4.7,
        "installation_count": 43,
        "success_rate": 89.3,
        "required_integrations": ["openai", "google_analytics"],
        "optional_integrations": ["semrush", "ahrefs"],
        "required_permissions": ["read_content_data", "ai_api_access"],
        "created_at": "2024-12-15T00:00:00Z",
        "updated_at": "2025-01-15T00:00:00Z",
        "tags": ["ai", "content", "recommendations", "optimization", "gpt"],
        "template_json": "ai-recommendations-workflow.json",
        "setup_guide": "ai-recommendations-setup.md",
        "demo_video": "https://demo.example.com/ai-recommendations",
        "featured": true,
        "n8n_compatible": true,
        "plan_requirements": {
          "basic": false,
          "premium": true,
          "enterprise": true
        },
        "performance_metrics": {
          "avg_execution_time": "4.2 minutes",
          "success_rate": "89.3%",
          "avg_data_points": 200
        },
        "cost_estimate": {
          "monthly_api_cost": 45,
          "execution_cost": 0.15
        }
      },
      {
        "id": "workflow_status_monitoring",
        "name": "Workflow Status Monitoring & Alerts",
        "description": "Monitor workflow health, performance, and send alerts for failures or performance issues.",
        "detailed_description": "Comprehensive monitoring system for n8n workflows with health checks, performance metrics, error tracking, and automated alerting.",
        "category": "monitoring",
        "trigger": "schedule",
        "complexity": "intermediate",
        "estimated_time_saved": 30,
        "usage_count": 167,
        "average_rating": 4.6,
        "installation_count": 124,
        "success_rate": 96.8,
        "required_integrations": ["n8n_api"],
        "optional_integrations": ["slack", "email", "discord"],
        "required_permissions": ["read_workflow_data", "send_webhooks"],
        "created_at": "2024-11-20T00:00:00Z",
        "updated_at": "2025-01-15T00:00:00Z",
        "tags": ["monitoring", "alerts", "health-check", "performance"],
        "template_json": "workflow-status-monitoring-workflow.json",
        "setup_guide": "workflow-status-monitoring-setup.md",
        "demo_video": "https://demo.example.com/workflow-monitoring",
        "featured": false,
        "n8n_compatible": true,
        "plan_requirements": {
          "basic": true,
          "premium": true,
          "enterprise": true
        },
        "performance_metrics": {
          "avg_execution_time": "1.2 minutes",
          "success_rate": "96.8%",
          "avg_data_points": 50
        },
        "cost_estimate": {
          "monthly_api_cost": 5,
          "execution_cost": 0.02
        }
      },
      {
        "id": "seo_content_optimization",
        "name": "SEO Content Optimization Pipeline",
        "description": "Automated SEO analysis and content optimization using multiple SEO tools and AI.",
        "detailed_description": "Comprehensive SEO workflow that analyzes content, identifies optimization opportunities, generates meta descriptions, and tracks ranking improvements.",
        "category": "marketing",
        "trigger": "webhook",
        "complexity": "expert",
        "estimated_time_saved": 90,
        "usage_count": 76,
        "average_rating": 4.9,
        "installation_count": 34,
        "success_rate": 91.7,
        "required_integrations": ["semrush", "openai", "google_search_console"],
        "optional_integrations": ["ahrefs", "screaming_frog"],
        "required_permissions": ["read_seo_data", "ai_api_access", "content_management"],
        "created_at": "2024-12-10T00:00:00Z",
        "updated_at": "2025-01-15T00:00:00Z",
        "tags": ["seo", "content", "optimization", "ai", "ranking"],
        "template_json": "seo-content-optimization-workflow.json",
        "setup_guide": "seo-content-optimization-setup.md",
        "demo_video": "https://demo.example.com/seo-optimization",
        "featured": true,
        "n8n_compatible": true,
        "plan_requirements": {
          "basic": false,
          "premium": false,
          "enterprise": true
        },
        "performance_metrics": {
          "avg_execution_time": "6.5 minutes",
          "success_rate": "91.7%",
          "avg_data_points": 300
        },
        "cost_estimate": {
          "monthly_api_cost": 75,
          "execution_cost": 0.25
        }
      },
      {
        "id": "lead_nurturing_automation",
        "name": "Multi-Channel Lead Nurturing Automation",
        "description": "Automated lead nurturing across email, SMS, and social media with behavioral triggers.",
        "detailed_description": "Advanced lead nurturing system with multi-channel communication, behavioral scoring, automated follow-ups, and conversion tracking.",
        "category": "automation",
        "trigger": "webhook",
        "complexity": "advanced",
        "estimated_time_saved": 120,
        "usage_count": 134,
        "average_rating": 4.8,
        "installation_count": 67,
        "success_rate": 93.4,
        "required_integrations": ["email_service", "crm"],
        "optional_integrations": ["sms_service", "social_media"],
        "required_permissions": ["send_emails", "manage_contacts", "webhook_access"],
        "created_at": "2024-11-25T00:00:00Z",
        "updated_at": "2025-01-15T00:00:00Z",
        "tags": ["automation", "lead-nurturing", "marketing", "conversion"],
        "template_json": "lead-nurturing-automation-workflow.json",
        "setup_guide": "lead-nurturing-automation-setup.md",
        "demo_video": "https://demo.example.com/lead-nurturing",
        "featured": true,
        "n8n_compatible": true,
        "plan_requirements": {
          "basic": false,
          "premium": true,
          "enterprise": true
        },
        "performance_metrics": {
          "avg_execution_time": "3.8 minutes",
          "success_rate": "93.4%",
          "avg_data_points": 180
        },
        "cost_estimate": {
          "monthly_api_cost": 20,
          "execution_cost": 0.08
        }
      }
    ]
  },
  "tags": [
    {
      "createdAt": "2025-01-15T00:00:00.000Z",
      "updatedAt": "2025-01-15T00:00:00.000Z",
      "id": "workflow-templates",
      "name": "workflow-templates"
    },
    {
      "createdAt": "2025-01-15T00:00:00.000Z",
      "updatedAt": "2025-01-15T00:00:00.000Z",
      "id": "template-manager",
      "name": "template-manager"
    },
    {
      "createdAt": "2025-01-15T00:00:00.000Z",
      "updatedAt": "2025-01-15T00:00:00.000Z",
      "id": "production-ready",
      "name": "production-ready"
    },
    {
      "createdAt": "2025-01-15T00:00:00.000Z",
      "updatedAt": "2025-01-15T00:00:00.000Z",
      "id": "dashboard-integration",
      "name": "dashboard-integration"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-01-15T00:00:00.000Z",
  "versionId": "2.0",
  "meta": {
    "instanceId": "n8n-template-manager",
    "description": "Production-ready workflow template manager with comprehensive template library, installation capabilities, validation, and search functionality. Supports multiple user plans with appropriate access controls.",
    "author": "System Administrator",
    "version": "2.0.0",
    "compatibility": {
      "n8n_version": ">= 1.0.0",
      "required_credentials": [],
      "required_environment_variables": [
        "DASHBOARD_API_URL (optional)"
      ]
    },
    "features": [
      "Template browsing and filtering",
      "Advanced search with scoring",
      "Template installation simulation",
      "Template validation and compatibility checking",
      "Category-based organization",
      "Plan-based access control",
      "Pagination and sorting",
      "Comprehensive template metadata",
      "Input validation and sanitization",
      "Error handling and graceful degradation",
      "Webhook response handling",
      "Rate limiting awareness"
    ],
    "supported_actions": [
      "get_templates - Browse available workflow templates",
      "get_template_details - Get detailed information about a specific template",
      "install_template - Simulate template installation process",
      "validate_template - Validate template compatibility and requirements",
      "get_categories - Get available template categories",
      "search_templates - Advanced search across templates"
    ],
    "plan_features": {
      "basic": {
        "template_access": "Limited to basic complexity templates",
        "rate_limit": "100 requests/hour",
        "features": ["Browse templates", "Basic search", "Template details"]
      },
      "premium": {
        "template_access": "Access to advanced templates",
        "rate_limit": "500 requests/hour",
        "features": ["All basic features", "Advanced search", "Installation simulation", "Cost estimates"]
      },
      "enterprise": {
        "template_access": "Full access including expert-level templates",
        "rate_limit": "2000 requests/hour",
        "features": ["All premium features", "Template validation", "Performance metrics", "Priority support"]
      }
    },
    "monitoring": {
      "request_logging": true,
      "performance_tracking": true,
      "error_handling": true,
      "rate_limiting": true
    }
  }
}
