{
  "name": "Content Re-purposer",
  "nodes": [
    {
      "parameters": {
        "path": "content-repurposer",
        "options": {}
      },
      "id": "dcab4e4c-9578-4df2-bb2e-ad175636451a",
      "name": "Webhook Start",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -576,
        560
      ],
      "webhookId": "content-repurposer"
    },
    {
      "parameters": {
        "jsCode": "// Input Validation and Transformation\nconst inputData = $input.all()[0].json;\n\n// Check required fields\nif (!inputData.blogUrl) {\n  return [{\n    json: {\n      error: true,\n      message: \"Blog URL is required\"\n    }\n  }];\n}\n\nif (!inputData.targetFormats || inputData.targetFormats.length === 0) {\n  return [{\n    json: {\n      error: true,\n      message: \"At least one target format is required\"\n    }\n  }];\n}\n\n// Transform inputs to structured format\nconst structuredData = {\n  blogUrl: inputData.blogUrl.trim(),\n  targetFormats: Array.isArray(inputData.targetFormats) \n    ? inputData.targetFormats.map(format => format.toLowerCase().trim())\n    : [inputData.targetFormats.toLowerCase().trim()],\n  audienceDescription: inputData.audienceDescription || 'general audience',\n  tone: inputData.tone || 'professional',\n  platformSpecifics: Array.isArray(inputData.platformSpecifics)\n    ? inputData.platformSpecifics.map(platform => platform.toLowerCase().trim())\n    : inputData.platformSpecifics \n      ? [inputData.platformSpecifics.toLowerCase().trim()]\n      : [],\n  languagePreference: inputData.languagePreference || 'english',\n  localizationSettings: inputData.localizationSettings || 'global',\n  error: false\n};\n\n// Map common platform variations to standard names\nconst platformMapping = {\n  'twitter': 'twitter/x',\n  'x': 'twitter/x',\n  'whatsapp': 'telegram/whatsapp',\n  'telegram': 'telegram/whatsapp'\n};\n\nstructuredData.platformSpecifics = structuredData.platformSpecifics.map(platform => \n  platformMapping[platform] || platform\n);\n\n// Remove duplicates after mapping\nstructuredData.platformSpecifics = [...new Set(structuredData.platformSpecifics)];\n\nreturn [{ json: structuredData }];"
      },
      "id": "cba491f9-e730-4cf7-ba1a-2eb4949902ea",
      "name": "Input Validation & Transform",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "validation-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "c31ca978-7add-44e3-a942-bb015b87fc44",
              "leftValue": "={{ $json.error }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "d997b47e-5e97-46f6-975b-3916ace8571a",
      "name": "Error Check IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -240,
        560
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "9030c487-c256-44d1-b469-25ed02f6705e",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -240,
        720
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.blogUrl }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "f1137e31-ac07-4e24-af5a-8a3c892f0991",
      "name": "Fetch Blog Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -32,
        560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "http-success-check",
              "leftValue": "={{ $('Fetch Blog Content').first().json.data.includes('<html') }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3fdb7d47-da99-42ee-8e52-32a7bf409e5b",
      "name": "HTTP Error Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        176,
        560
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1bc5b5a4-947b-47c7-89d2-bf39b31c621e",
      "name": "HTTP Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        192,
        752
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced HTML Content Extraction (n8n Cloud Compatible)\nconst inputData = $input.first().json;\nconst httpResponse = $input.last().json;\nconst htmlContent = httpResponse.data || httpResponse.body || '';\n\n// Helper function to clean text\nfunction cleanText(text) {\n  return text.replace(/<[^>]*>/g, '')\n             .replace(/&[^;]+;/g, ' ')\n             .replace(/\\s+/g, ' ')\n             .trim();\n}\n\n// Extract title with multiple fallbacks\nlet title = '';\nconst titlePatterns = [\n  /<title[^>]*>([^<]+)<\\/title>/i,\n  /<h1[^>]*class=[^>]*entry-title[^>]*>([^<]*)<\\/h1>/i,\n  /<h1[^>]*>([^<]*)<\\/h1>/i,\n  /<meta[^>]*property=[\"\\']og:title[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i\n];\n\nfor (const pattern of titlePatterns) {\n  const match = htmlContent.match(pattern);\n  if (match && match[1]) {\n    title = cleanText(match[1]);\n    if (title.length > 10) break; // Skip very short titles\n  }\n}\nif (!title) title = 'Blog Post';\n\n// Extract main content with better patterns\nlet content = '';\nlet contentExtractionMethod = 'structured';\nconst contentPatterns = [\n  // WordPress specific\n  /<div[^>]*class=[\"\\'][^\"\\']*entry-content[^\"\\']*[\"\\'][^>]*>([\\s\\S]*?)<\\/div>/i,\n  /<div[^>]*class=[\"\\'][^\"\\']*post-content[^\"\\']*[\"\\'][^>]*>([\\s\\S]*?)<\\/div>/i,\n  /<div[^>]*class=[\"\\'][^\"\\']*content[^\"\\']*[\"\\'][^>]*>([\\s\\S]*?)<\\/div>/i,\n  // Generic patterns\n  /<article[^>]*>([\\s\\S]*?)<\\/article>/i,\n  /<main[^>]*>([\\s\\S]*?)<\\/main>/i,\n  /<div[^>]*id=[\"\\']content[\"\\'][^>]*>([\\s\\S]*?)<\\/div>/i\n];\n\nfor (const pattern of contentPatterns) {\n  const match = htmlContent.match(pattern);\n  if (match && match[1]) {\n    let rawContent = match[1];\n    // Remove common unwanted sections\n    rawContent = rawContent.replace(/<div[^>]*class=[^>]*sidebar[^>]*>[\\s\\S]*?<\\/div>/gi, '');\n    rawContent = rawContent.replace(/<div[^>]*class=[^>]*widget[^>]*>[\\s\\S]*?<\\/div>/gi, '');\n    rawContent = rawContent.replace(/<nav[^>]*>[\\s\\S]*?<\\/nav>/gi, '');\n    \n    content = cleanText(rawContent);\n    if (content.length > 200) break; // Skip very short content\n  }\n}\n\n// ENHANCED FALLBACK SYSTEM\n// Fallback 1: extract paragraphs\nif (!content || content.length < 200) {\n  contentExtractionMethod = 'paragraphs';\n  const paragraphs = htmlContent.match(/<p[^>]*>([^<]*(?:<[^p/][^>]*>[^<]*<\\/[^>]*>[^<]*)*)<\\/p>/gi);\n  if (paragraphs && paragraphs.length > 2) {\n    content = paragraphs.slice(0, 10) // Take first 10 paragraphs\n                       .map(p => cleanText(p))\n                       .filter(p => p.length > 20) // Filter out very short paragraphs\n                       .join('\\n\\n');\n  }\n}\n\n// Fallback 2: Extract all paragraphs from entire page\nif (!content || content.length < 150) {\n  contentExtractionMethod = 'all-paragraphs';\n  const allParagraphs = htmlContent.matchAll(/<p[^>]*>(.*?)<\\/p>/gis);\n  const paragraphTexts = [];\n  \n  for (const match of allParagraphs) {\n    const cleanParagraph = cleanText(match[1]);\n    if (cleanParagraph.length > 15 && cleanParagraph.length < 500) {\n      paragraphTexts.push(cleanParagraph);\n    }\n    if (paragraphTexts.length >= 15) break; // Limit to prevent huge content\n  }\n  \n  if (paragraphTexts.length > 0) {\n    content = paragraphTexts.join('\\n\\n');\n  }\n}\n\n// Enhanced meta data extraction (moved up for fallback use)\nconst metaData = {};\n\n// Description (multiple sources)\nconst descPatterns = [\n  /<meta[^>]*name=[\"\\']description[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i,\n  /<meta[^>]*property=[\"\\']og:description[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i,\n  /<meta[^>]*name=[\"\\']twitter:description[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i\n];\n\nfor (const pattern of descPatterns) {\n  const match = htmlContent.match(pattern);\n  if (match && match[1] && match[1].length > 20) {\n    metaData.description = match[1];\n    break;\n  }\n}\n\n// Fallback 3: Use meta description\nif (!content || content.length < 100) {\n  contentExtractionMethod = 'meta-description';\n  if (metaData.description && metaData.description.length > 50) {\n    content = metaData.description + '\\n\\nNote: Content extracted from meta description due to parsing limitations.';\n  }\n}\n\n// Fallback 4: Extract any readable text from body\nif (!content || content.length < 80) {\n  contentExtractionMethod = 'body-text';\n  const bodyMatch = htmlContent.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i);\n  if (bodyMatch) {\n    let bodyText = bodyMatch[1];\n    // Remove scripts, styles, and navigation\n    bodyText = bodyText.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '');\n    bodyText = bodyText.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '');\n    bodyText = bodyText.replace(/<nav[^>]*>[\\s\\S]*?<\\/nav>/gi, '');\n    bodyText = bodyText.replace(/<header[^>]*>[\\s\\S]*?<\\/header>/gi, '');\n    bodyText = bodyText.replace(/<footer[^>]*>[\\s\\S]*?<\\/footer>/gi, '');\n    \n    const cleanBodyText = cleanText(bodyText);\n    if (cleanBodyText.length > 100) {\n      content = cleanBodyText.substring(0, 1000) + '...'; // Limit to prevent huge content\n    }\n  }\n}\n\n// Fallback 5: Create minimal content from title\nif (!content || content.length < 50) {\n  contentExtractionMethod = 'minimal';\n  content = `Content could not be extracted from this blog post titled \"${title}\". The page may have unusual structure or require JavaScript rendering.`;\n}\n\n// Extract structured content sections\nconst extractedSections = {};\n\n// Extract headings for structure\nconst headings = [];\nconst headingMatches = htmlContent.matchAll(/<h[2-6][^>]*>([^<]+)<\\/h[2-6]>/gi);\nfor (const match of headingMatches) {\n  const heading = cleanText(match[1]);\n  if (heading.length > 3 && heading.length < 100) {\n    headings.push(heading);\n  }\n  if (headings.length >= 8) break; // Limit headings\n}\n\n// Extract lists (tips, steps, etc.)\nconst lists = [];\nconst listMatches = htmlContent.matchAll(/<[uo]l[^>]*>([\\s\\S]*?)<\\/[uo]l>/gi);\nfor (const match of listMatches) {\n  const listContent = match[1];\n  const listItems = listContent.match(/<li[^>]*>([^<]*(?:<[^/][^>]*>[^<]*<\\/[^>]*>[^<]*)*)<\\/li>/gi);\n  if (listItems && listItems.length >= 2) {\n    const cleanItems = listItems.map(item => cleanText(item))\n                               .filter(item => item.length > 10 && item.length < 200)\n                               .slice(0, 8); // Limit to 8 items\n    if (cleanItems.length >= 2) {\n      lists.push(cleanItems);\n    }\n  }\n  if (lists.length >= 3) break; // Limit lists\n}\n\n// Enhanced image extraction\nconst images = [];\nconst imgMatches = htmlContent.matchAll(/<img[^>]+>/gi);\nfor (const imgMatch of imgMatches) {\n  const imgTag = imgMatch[0];\n  \n  const srcMatch = imgTag.match(/src=[\"\\']([^\"\\']+)[\"\\']/i);\n  if (srcMatch) {\n    const src = srcMatch[1];\n    \n    // Better filtering\n    const skipPatterns = ['data:', 'icon', 'logo', 'avatar', 'gravatar', '.svg', 'emoji'];\n    const shouldSkip = skipPatterns.some(pattern => src.toLowerCase().includes(pattern));\n    \n    if (!shouldSkip && src.includes('http')) {\n      const altMatch = imgTag.match(/alt=[\"\\']([^\"\\']*)[\"\\']/i);\n      const alt = altMatch ? altMatch[1] : '';\n      \n      // Try to get image dimensions if available\n      const widthMatch = imgTag.match(/width=[\"\\']([^\"\\']*)[\"\\']/i);\n      const heightMatch = imgTag.match(/height=[\"\\']([^\"\\']*)[\"\\']/i);\n      \n      images.push({ \n        src, \n        alt,\n        width: widthMatch ? widthMatch[1] : null,\n        height: heightMatch ? heightMatch[1] : null\n      });\n    }\n  }\n  \n  if (images.length >= 5) break;\n}\n\n// Keywords and tags\nconst keywordsMatch = htmlContent.match(/<meta[^>]*name=[\"\\']keywords[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i);\nmetaData.keywords = keywordsMatch ? keywordsMatch[1] : '';\n\n// Author (multiple sources)\nconst authorPatterns = [\n  /<meta[^>]*name=[\"\\']author[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i,\n  /<span[^>]*class=[^>]*author[^>]*>([^<]*)<\\/span>/i,\n  /<div[^>]*class=[^>]*author[^>]*>([^<]*)<\\/div>/i\n];\n\nfor (const pattern of authorPatterns) {\n  const match = htmlContent.match(pattern);\n  if (match && match[1]) {\n    metaData.author = cleanText(match[1]);\n    if (metaData.author.length > 2) break;\n  }\n}\n\n// Publishing date\nconst datePatterns = [\n  /<meta[^>]*property=[\"\\']article:published_time[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i,\n  /<time[^>]*datetime=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i,\n  /<meta[^>]*name=[\"\\']date[\"\\'][^>]*content=[\"\\']([^\"\\']*)[\"\\'][^>]*>/i\n];\n\nfor (const pattern of datePatterns) {\n  const match = htmlContent.match(pattern);\n  if (match && match[1]) {\n    metaData.publishDate = match[1];\n    break;\n  }\n}\n\n// Reading time estimation\nconst wordCount = content.split(/\\s+/).length;\nconst readingTime = Math.ceil(wordCount / 200); // Average 200 words per minute\n\n// Content analysis with extraction quality indicator\nconst contentAnalysis = {\n  wordCount: wordCount,\n  estimatedReadingTime: `${readingTime} min`,\n  hasLists: lists.length > 0,\n  hasHeadings: headings.length > 0,\n  contentType: headings.length > 3 ? 'structured' : 'narrative',\n  topicKeywords: extractTopicKeywords(content, title),\n  extractionMethod: contentExtractionMethod,\n  extractionQuality: content.length > 500 ? 'high' : content.length > 200 ? 'medium' : 'low',\n  limitedContent: content.length < 200\n};\n\n// Extract topic keywords (simple frequency analysis)\nfunction extractTopicKeywords(text, title) {\n  const words = (text + ' ' + title).toLowerCase()\n                 .replace(/[^\\w\\s]/g, ' ')\n                 .split(/\\s+/)\n                 .filter(word => word.length > 3 && word.length < 15);\n  \n  // Common stop words to filter\n  const stopWords = ['this', 'that', 'with', 'from', 'they', 'been', 'have', 'their', 'said', 'each', 'which', 'their', 'time', 'will', 'about', 'would', 'there', 'could', 'other', 'after', 'first', 'well', 'many'];\n  \n  const wordFreq = {};\n  words.forEach(word => {\n    if (!stopWords.includes(word)) {\n      wordFreq[word] = (wordFreq[word] || 0) + 1;\n    }\n  });\n  \n  return Object.entries(wordFreq)\n               .sort(([,a], [,b]) => b - a)\n               .slice(0, 8)\n               .map(([word]) => word);\n}\n\n// Final structured output\nconst structuredOutput = {\n  ...inputData,\n  extractedContent: {\n    title: title,\n    content: content.substring(0, 8000), // Increased limit\n    headings: headings,\n    lists: lists,\n    images: images,\n    metaData: metaData,\n    contentAnalysis: contentAnalysis\n  },\n  originalUrl: inputData.blogUrl\n};\n\nreturn [{ json: structuredOutput }];"
      },
      "id": "aabbceea-29c2-46ac-a148-dae2038b1f90",
      "name": "HTML Extract & Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        560
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert Facebook content strategist specializing in creating viral, engagement-driven posts. You understand Facebook's algorithm favors meaningful conversations, emotional reactions, and content that encourages sharing among friends and family.",
              "role": "system"
            },
            {
              "content": "=Create a compelling Facebook post using this blog content:\n\n**BLOG DATA:**\nTitle: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nContent: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nKey Headings: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.join(', ') || 'None' }}\nLists/Tips: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'None' }}\nTopic Keywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') || 'general' }}\nReading Time: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.estimatedReadingTime || '5 min' }}\n\n**AUDIENCE & CONTEXT:**\nTarget Audience: {{ $('Error Check IF').first().json.audienceDescription || 'general audience' }}\nTone: {{ $('Error Check IF').first().json.tone || 'professional' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nLocation: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**REQUIREMENTS:**\n- Create an engaging Facebook post under 500 words\n- Start with a scroll-stopping hook that relates to the audience's pain points\n- Use the blog's key insights and any lists/tips as value-driven content\n- Include 2-3 strategic hashtags (not more)\n- Add a strong call-to-action that encourages comments and shares\n- Make it feel personal and conversational for {{ $('Error Check IF').first().json.localizationSettings || 'global' }} audience\n- If lists exist in the blog, present key points in an easy-to-scan format\n- Include emotional triggers that make people want to engage\n\nFormat as a complete, ready-to-post Facebook update."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "7b61e769-38b6-4dfa-83c6-16ff581eae96",
      "name": "Facebook OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        976,
        432
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a top Instagram content creator who understands visual storytelling, hashtag strategy, and creating scroll-stopping content that drives high engagement and saves.",
              "role": "system"
            },
            {
              "content": "=Transform this blog into Instagram content:\n\n**BLOG DATA:**\nTitle: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nContent: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nKey Headings: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.join(', ') || 'None' }}\nLists/Tips: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'None' }}\nTopic Keywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }}\nAvailable Images: {{ $('HTML Extract & Structure').first().json.extractedContent.images.length || 0 }} images found\n\n**TARGET & CONTEXT:**\nAudience: {{ $('Error Check IF').first().json.audienceDescription || 'general audience' }}\nTone: {{ $('Error Check IF').first().json.tone || 'professional' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nRegion: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**CREATE:**\n1. **Caption** (under 2200 chars):\n   - Hook in first line that stops scrolling\n   - Break content into digestible paragraphs with line breaks\n   - Use blog's lists/tips as numbered points or bullet format\n   - Include value-driven insights from the blog content\n   - Add personal touch relevant to {{ $('Error Check IF').first().json.localizationSettings || 'global' }} audience\n\n2. **Hashtag Strategy** (15-20 hashtags):\n   - Mix of trending, niche, and location-based tags\n   - Use topic keywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }}\n   - Include location tags for {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n3. **Visual Suggestions**:\n   - Recommend image/graphic ideas based on blog content\n   - Suggest story highlights and carousel ideas\n\n4. **Engagement Strategy**:\n   - Question in caption to drive comments\n   - Call-to-action for saves and shares\n\nFormat as complete Instagram post with clear sections."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "a2ee42d2-3fa9-4892-a675-c95aff0b1315",
      "name": "Instagram OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1328,
        448
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a Twitter/X growth expert who creates viral threads, engaging tweets, and content that drives retweets, replies, and builds thought leadership.",
              "role": "system"
            },
            {
              "content": "Create Twitter/X content from this blog:\n\n**BLOG INSIGHTS:**\nTitle: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nContent: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nKey Points: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.join(', ') || 'Key insights from content' }}\nActionable Tips: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'Content-derived tips' }}\nKeywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }}\n\n**AUDIENCE:**\nTarget: {{ $('Error Check IF').first().json.audienceDescription || 'general audience' }}\nStyle: {{ $('Error Check IF').first().json.tone || 'professional' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nMarket: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**DELIVER:**\n1. **Main Tweet** (under 280 chars):\n   - Compelling hook with key insight\n   - Promise of value in thread\n   - Include relevant emojis\n\n2. **Thread** (4-6 follow-up tweets):\n   - Each tweet under 280 characters\n   - Use blog's structure and lists for individual tweets\n   - Include actionable takeaways\n   - Add statistics or facts from blog if available\n\n3. **Hashtags**: 2-3 trending tags using keywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.slice(0,3).join(', ') }}\n\n4. **Engagement Elements**:\n   - Questions that spark replies\n   - Retweet-worthy insights\n   - Call-to-action in final tweet\n\nFormat as numbered Twitter thread (1/6, 2/6, etc.)."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "500ef93a-340f-45e7-8963-b49f582a2c9e",
      "name": "Twitter OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1024,
        576
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a LinkedIn thought leader who creates professional content that drives meaningful business conversations, builds authority, and generates high-quality engagement in professional networks.",
              "role": "system"
            },
            {
              "content": "=Develop LinkedIn thought leadership content:\n\n**SOURCE MATERIAL:**\nTitle: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nContent: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nStructure: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.join(' | ') || 'Professional insights' }}\nKey Frameworks: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'Strategic points from content' }}\nIndustry Keywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }}\nContent Type: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.contentType }}\n\n**PROFESSIONAL CONTEXT:**\nAudience: {{ $('Error Check IF').first().json.audienceDescription || 'business professionals' }}\nVoice: {{ $('Error Check IF').first().json.tone || 'professional' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nMarket: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**CREATE PROFESSIONAL POST:**\n- **Opening**: Industry-relevant hook with credibility signal\n- **Body**: Transform blog insights into professional frameworks\n- **Structure**: Use blog's headings and lists as strategic points\n- **Value**: Actionable business insights for {{ $('Error Check IF').first().json.audienceDescription || 'professionals' }}\n- **Authority**: Position insights within industry context\n- **Networking**: Encourage professional discussion and connection\n- **Length**: 1000-1500 characters for optimal LinkedIn engagement\n- **Hashtags**: 3-5 professional tags from: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.slice(0,5).join(', ') }}\n- **CTA**: Professional call-to-action (connect, share experience, discuss)\n\nAdapt tone and examples for {{ $('Error Check IF').first().json.localizationSettings || 'global' }} business culture."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "2d56c82b-5a26-4214-a93a-9192a3ce754a",
      "name": "LinkedIn OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1328,
        608
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a YouTube content strategist who creates compelling video concepts, SEO-optimized descriptions, and content that drives views, subscriptions, and audience retention.",
              "role": "system"
            },
            {
              "content": "Design complete YouTube video package:\n\n**CONTENT SOURCE:**\nBlog Title: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nMain Content: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nVideo Structure: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.join(' → ') || 'Content flow' }}\nKey Points: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'Main takeaways' }}\nSEO Keywords: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }}\nEstimated Length: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.estimatedReadingTime }} content\n\n**AUDIENCE DATA:**\nViewers: {{ $('Error Check IF').first().json.audienceDescription || 'general audience' }}\nStyle: {{ $('Error Check IF').first().json.tone || 'engaging' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nRegion: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**COMPLETE PACKAGE:**\n\n1. **Video Title** (under 60 chars, SEO-optimized)\n2. **Description** (detailed, under 5000 chars):\n   - Compelling intro\n   - Timestamped chapters based on blog headings\n   - Key takeaways and value proposition\n   - SEO keywords naturally integrated\n   - Links and CTAs\n\n3. **Tags** (15 SEO tags using: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }})\n\n4. **Video Outline/Script Structure**:\n   - Hook (first 15 seconds)\n   - Main content sections from blog headings\n   - Engagement points and retention tactics\n   - Clear conclusion and CTA\n\n5. **Thumbnail Suggestions**: Visual concepts based on content\n\n6. **Audience Engagement**:\n   - Comments encouragement\n   - Subscribe prompts\n   - Community building for {{ $('Error Check IF').first().json.localizationSettings || 'global' }} audience\n\nFormat as complete YouTube content strategy."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "0ffa57fb-43b9-40f1-867f-8ff60362bc0a",
      "name": "YouTube OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        976,
        720
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a messaging expert who creates shareable, forward-friendly content optimized for personal messaging apps, group chats, and broadcast channels.",
              "role": "system"
            },
            {
              "content": "Create shareable messaging content:\n\n**SOURCE:**\nTitle: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nContent: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nQuick Points: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.slice(0,5).join(' • ') || 'Key insights' }}\nAction Items: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'Practical tips' }}\nFocus Areas: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.slice(0,4).join(', ') }}\n\n**MESSAGE CONTEXT:**\nAudience: {{ $('Error Check IF').first().json.audienceDescription || 'general audience' }}\nTone: {{ $('Error Check IF').first().json.tone || 'friendly' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nCulture: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**CREATE BROADCAST MESSAGE:**\n- **Attention Grabber**: Emoji + compelling first line\n- **Mobile Format**: Short paragraphs, bullet points, line breaks\n- **Key Value**: Transform blog lists into easy-to-scan tips\n- **Forward-Friendly**: Content people want to share in family/friend groups\n- **Cultural Fit**: Relevant to {{ $('Error Check IF').first().json.localizationSettings || 'global' }} messaging culture\n- **Length**: Under 4096 characters\n- **Emojis**: Strategic use for readability and engagement\n- **Call-to-Action**: Encourage sharing and discussion\n\n**FORMAT REQUIREMENTS:**\n✓ Mobile-first formatting\n✓ Easy to read in small screens\n✓ Shareable in personal conversations\n✓ Clear value proposition\n✓ Minimal hashtags (1-2 max)\n\nMake it feel like a helpful friend sharing valuable insights."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "b8064095-66fd-4170-bb14-56225d52da2f",
      "name": "Telegram OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1328,
        736
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "GPT-5-CHAT-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a versatile content strategist who can adapt any content to any platform's unique requirements, audience expectations, and engagement patterns.",
              "role": "system"
            },
            {
              "content": "Adapt this content for {{ $('breaking platforms').first().json.platform || 'the specified platform' }}:\n\n**ORIGINAL CONTENT:**\nTitle: {{ $('HTML Extract & Structure').first().json.extractedContent.title }}\nContent: {{ $('HTML Extract & Structure').first().json.extractedContent.content }}\nStructure: {{ $('HTML Extract & Structure').first().json.extractedContent.headings.join(' | ') || 'Content structure' }}\nKey Elements: {{ JSON.stringify($('HTML Extract & Structure').first().json.extractedContent.lists) || 'Main points' }}\nTopic Focus: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.topicKeywords.join(', ') }}\nContent Nature: {{ $('HTML Extract & Structure').first().json.extractedContent.contentAnalysis.contentType }}\n\n**CUSTOMIZATION REQUIREMENTS:**\nPlatform: {{ $('breaking platforms').first().json.platform || 'specified platform' }}\nTarget Audience: {{ $('Error Check IF').first().json.audienceDescription || 'general audience' }}\nBrand Voice: {{ $('Error Check IF').first().json.tone || 'professional' }}\nLanguage: {{ $('Error Check IF').first().json.languagePreference || 'English' }}\nRegional Context: {{ $('Error Check IF').first().json.localizationSettings || 'global' }}\n\n**ADAPTATION STRATEGY:**\n1. **Research the platform**: Understand {{ $('breaking platforms').first().json.platform || 'this platform' }}'s unique features, audience behavior, and content formats\n\n2. **Content Optimization**:\n   - Adapt length and format to platform norms\n   - Use platform-specific features (hashtags, mentions, etc.)\n   - Optimize for platform's algorithm and engagement patterns\n\n3. **Audience Alignment**:\n   - Match tone to platform culture\n   - Use appropriate engagement tactics\n   - Include platform-specific CTAs\n\n4. **Technical Requirements**:\n   - Follow character/word limits\n   - Use proper formatting\n   - Include relevant metadata\n\n5. **Cultural Adaptation**:\n   - Align with {{ $('Error Check IF').first().json.localizationSettings || 'global' }} audience preferences\n   - Use appropriate cultural references and examples\n\n**DELIVERABLE:**\nCreate platform-optimized content that maximizes engagement and achieves the content goals while maintaining the core value and insights from the original blog post."
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "0fd2953f-548c-4027-a5d1-bf5c5d4b751c",
      "name": "Other Platform OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1184,
        976
      ],
      "credentials": {
        "openAiApi": {
          "id": "MwFlNFNMl63MGCly",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Final Data Processing - Dynamic Content Repurposer\nconst allInputs = $input.all();\nconsole.log('Total inputs received:', allInputs.length);\n\n// Get original user inputs from Input Validation & Transform node\nlet originalInputs = {};\ntry {\n  originalInputs = $('Input Validation & Transform').first().json;\n  console.log('Original inputs retrieved:', originalInputs);\n} catch (error) {\n  console.error('Error retrieving original inputs:', error);\n  originalInputs = {};\n}\n\n// Get structured blog data from HTML Extract & Structure node  \nlet blogData = {};\nlet structuredData = {};\ntry {\n  structuredData = $('HTML Extract & Structure').first().json;\n  blogData = structuredData?.extractedContent || {};\n  console.log('Blog data retrieved:', blogData?.title || 'No title found');\n} catch (error) {\n  console.error('Error retrieving blog data:', error);\n}\n\n// Initialize final response structure\nconst finalResponse = {\n  success: true,\n  timestamp: new Date().toISOString(),\n  \n  // Blog information section\n  blog_info: {\n    title: blogData?.title || 'Untitled Blog Post',\n    url: originalInputs?.blogUrl || '',\n    word_count: blogData?.contentAnalysis?.wordCount || 0,\n    estimated_reading_time: blogData?.contentAnalysis?.estimatedReadingTime || 'Unknown',\n    content_type: blogData?.contentAnalysis?.contentType || 'unknown',\n    \n    // Meta information\n    meta: {\n      description: blogData?.metaData?.description || '',\n      author: blogData?.metaData?.author || '',\n      publish_date: blogData?.metaData?.publishDate || '',\n      keywords: blogData?.metaData?.keywords || ''\n    },\n    \n    // Content structure\n    structure: {\n      headings: blogData?.headings || [],\n      headings_count: (blogData?.headings || []).length,\n      lists: blogData?.lists || [],\n      lists_count: (blogData?.lists || []).length,\n      images: blogData?.images || [],\n      images_count: (blogData?.images || []).length,\n      has_structured_content: (blogData?.contentAnalysis?.hasHeadings || false) && (blogData?.contentAnalysis?.hasLists || false)\n    },\n    \n    // Topic analysis\n    analysis: {\n      topic_keywords: blogData?.contentAnalysis?.topicKeywords || [],\n      content_preview: blogData?.content ? blogData.content.substring(0, 300) + '...' : 'No content preview available'\n    }\n  },\n  \n  // User request information\n  request_info: {\n    target_formats: originalInputs?.targetFormats || [],\n    platforms_requested: originalInputs?.platformSpecifics || [],\n    audience_description: originalInputs?.audienceDescription || 'general audience',\n    tone_style: originalInputs?.tone || 'professional',\n    language_preference: originalInputs?.languagePreference || 'English',\n    localization_settings: originalInputs?.localizationSettings || 'global'\n  },\n  \n  // Generated content by platform\n  generated_content: {},\n  \n  // Processing metadata\n  processing: {\n    total_platforms_requested: (originalInputs?.platformSpecifics || []).length,\n    platforms_successfully_processed: [],\n    platforms_failed: [],\n    processing_time: new Date().toISOString(),\n    ai_nodes_executed: 0,\n    content_adaptation_summary: []\n  }\n};\n\n// Platform mapping for consistent naming and identification\nconst platformMapping = {\n  'facebook': { name: 'Facebook', nodeIdentifier: 'facebook' },\n  'instagram': { name: 'Instagram', nodeIdentifier: 'instagram' },\n  'twitter': { name: 'Twitter/X', nodeIdentifier: 'twitter' },\n  'x': { name: 'Twitter/X', nodeIdentifier: 'twitter' },\n  'linkedin': { name: 'LinkedIn', nodeIdentifier: 'linkedin' },\n  'youtube': { name: 'YouTube', nodeIdentifier: 'youtube' },\n  'telegram': { name: 'Telegram/WhatsApp', nodeIdentifier: 'telegram' },\n  'whatsapp': { name: 'Telegram/WhatsApp', nodeIdentifier: 'telegram' },\n  'other': { name: 'Other Platform', nodeIdentifier: 'other' }\n};\n\n// Function to safely parse and structure AI response\nfunction parseAIResponse(content, platform) {\n  try {\n    if (!content) {\n      return {\n        success: false,\n        content: null,\n        error: 'No content generated',\n        raw_response: content\n      };\n    }\n    \n    // Handle different content formats\n    let parsedContent = content;\n    let contentType = 'text';\n    \n    // Try to identify structured content patterns\n    if (typeof content === 'string') {\n      // Check for common social media structures\n      if (content.includes('#') && (platform === 'instagram' || platform === 'twitter')) {\n        contentType = 'social_post_with_hashtags';\n      } else if (content.includes('**') || content.includes('###')) {\n        contentType = 'markdown_structured';\n      } else if (content.includes('1.') || content.includes('•')) {\n        contentType = 'list_format';\n      }\n    }\n    \n    return {\n      success: true,\n      content: parsedContent,\n      content_type: contentType,\n      character_count: typeof content === 'string' ? content.length : 0,\n      generated_at: new Date().toISOString(),\n      platform_optimized: true\n    };\n    \n  } catch (error) {\n    console.error(`Error parsing content for ${platform}:`, error);\n    return {\n      success: false,\n      content: null,\n      error: error.message,\n      raw_response: content\n    };\n  }\n}\n\n// Function to determine platform from input context\nfunction determinePlatformFromInput(input, inputIndex) {\n  // First, check if there's explicit platform information in the input\n  if (input.json?.platform) {\n    return input.json.platform.toLowerCase();\n  }\n  \n  // Check for OpenAI response structure and analyze content for platform clues\n  let content = '';\n  if (input.json?.choices && Array.isArray(input.json.choices) && input.json.choices.length > 0) {\n    content = input.json.choices[0]?.message?.content || '';\n  } else if (input.json?.content) {\n    content = input.json.content;\n  } else if (input.json?.message?.content) {\n    content = input.json.message.content;\n  }\n  \n  const lowerContent = content.toLowerCase();\n  \n  // Platform detection based on content patterns\n  if (lowerContent.includes('facebook') || lowerContent.includes('meaningful conversations')) return 'facebook';\n  if (lowerContent.includes('instagram') || lowerContent.includes('hashtag') && lowerContent.includes('story')) return 'instagram';\n  if (lowerContent.includes('twitter') || lowerContent.includes('tweet') || lowerContent.includes('/6')) return 'twitter';\n  if (lowerContent.includes('linkedin') || lowerContent.includes('professional') && lowerContent.includes('business')) return 'linkedin';\n  if (lowerContent.includes('youtube') || lowerContent.includes('video') && lowerContent.includes('description')) return 'youtube';\n  if (lowerContent.includes('telegram') || lowerContent.includes('whatsapp') || lowerContent.includes('broadcast')) return 'telegram';\n  \n  // Fallback: use the order based on common platform processing sequence\n  const platformOrder = ['facebook', 'instagram', 'twitter', 'linkedin', 'youtube', 'telegram', 'other'];\n  return platformOrder[inputIndex % platformOrder.length];\n}\n\n// Process each AI response from merge inputs\nlet processedCount = 0;\nallInputs.forEach((input, index) => {\n  try {\n    let contentToProcess = null;\n    let platform = null;\n    let processingSuccess = false;\n    \n    // Extract content from different AI response formats\n    if (input.json?.choices && Array.isArray(input.json.choices) && input.json.choices.length > 0) {\n      // OpenAI ChatGPT style response\n      const aiResponse = input.json.choices[0];\n      if (aiResponse?.message?.content) {\n        contentToProcess = aiResponse.message.content;\n        platform = determinePlatformFromInput(input, processedCount);\n        processingSuccess = true;\n      }\n    } else if (input.json?.content) {\n      // Direct content response\n      contentToProcess = input.json.content;\n      platform = determinePlatformFromInput(input, processedCount);\n      processingSuccess = true;\n    } else if (input.json?.message?.content) {\n      // Alternative message format\n      contentToProcess = input.json.message.content;\n      platform = determinePlatformFromInput(input, processedCount);\n      processingSuccess = true;\n    } else if (typeof input.json === 'string') {\n      // Direct string response\n      contentToProcess = input.json;\n      platform = determinePlatformFromInput(input, processedCount);\n      processingSuccess = true;\n    }\n    \n    if (contentToProcess && platform && processingSuccess) {\n      const platformInfo = platformMapping[platform] || { name: platform, nodeIdentifier: platform };\n      \n      console.log(`Processing platform: ${platform} (${platformInfo.name})`);\n      \n      // Parse and structure the AI response\n      const parsedContent = parseAIResponse(contentToProcess, platform);\n      \n      if (parsedContent.success) {\n        // Add to generated content\n        finalResponse.generated_content[platform] = {\n          platform_name: platformInfo.name,\n          platform_key: platform,\n          ...parsedContent,\n          \n          // Content adaptation details\n          adaptation_details: {\n            adapted_from_blog_title: finalResponse.blog_info.title,\n            source_word_count: finalResponse.blog_info.word_count,\n            adapted_headings: finalResponse.blog_info.structure.headings_count > 0,\n            adapted_lists: finalResponse.blog_info.structure.lists_count > 0,\n            target_audience: finalResponse.request_info.audience_description,\n            tone_applied: finalResponse.request_info.tone_style,\n            localization: finalResponse.request_info.localization_settings\n          }\n        };\n        \n        finalResponse.processing.platforms_successfully_processed.push(platformInfo.name);\n        finalResponse.processing.ai_nodes_executed++;\n        finalResponse.processing.content_adaptation_summary.push(`${platformInfo.name}: ${parsedContent.character_count} characters generated`);\n        \n        processedCount++;\n      } else {\n        // Record failed processing\n        finalResponse.processing.platforms_failed.push({\n          platform: platformInfo.name,\n          error: parsedContent.error,\n          attempted_at: new Date().toISOString()\n        });\n      }\n    }\n  } catch (error) {\n    console.error(`Error processing input ${index}:`, error);\n    finalResponse.processing.platforms_failed.push({\n      platform: `Unknown (index ${index})`,\n      error: error.message,\n      attempted_at: new Date().toISOString()\n    });\n  }\n});\n\n// Calculate success metrics\nconst totalRequested = finalResponse.processing.total_platforms_requested;\nconst totalProcessed = finalResponse.processing.platforms_successfully_processed.length;\nconst successRate = totalRequested > 0 ? Math.round((totalProcessed / totalRequested) * 100) : 0;\n\n// Add comprehensive summary\nfinalResponse.summary = {\n  operation_status: totalProcessed > 0 ? 'SUCCESS' : 'PARTIAL_FAILURE',\n  success_rate: `${successRate}%`,\n  \n  // Content summary\n  source_content: {\n    blog_title: finalResponse.blog_info.title,\n    blog_length: `${finalResponse.blog_info.word_count} words`,\n    reading_time: finalResponse.blog_info.estimated_reading_time,\n    structure_quality: finalResponse.blog_info.structure.has_structured_content ? 'Well-structured' : 'Basic structure'\n  },\n  \n  // Generation summary\n  content_generation: {\n    platforms_requested: totalRequested,\n    platforms_generated: totalProcessed,\n    total_content_pieces: Object.keys(finalResponse.generated_content).length,\n    primary_audience: finalResponse.request_info.audience_description,\n    content_tone: finalResponse.request_info.tone_style,\n    localization: finalResponse.request_info.localization_settings\n  },\n  \n  // Quality metrics\n  quality_indicators: {\n    source_has_headings: finalResponse.blog_info.structure.headings_count > 0,\n    source_has_lists: finalResponse.blog_info.structure.lists_count > 0,\n    source_has_images: finalResponse.blog_info.structure.images_count > 0,\n    topic_keywords_extracted: finalResponse.blog_info.analysis.topic_keywords.length,\n    multi_platform_ready: totalProcessed > 1\n  }\n};\n\n// Add recommendations based on results\nconst recommendations = [];\n\nif (finalResponse.blog_info.structure.images_count > 0) {\n  recommendations.push(`Utilize the ${finalResponse.blog_info.structure.images_count} available images for visual platforms like Instagram and Facebook`);\n}\n\nif (finalResponse.blog_info.structure.headings_count > 3) {\n  recommendations.push('Convert blog headings into bullet points or carousel slides for better social media engagement');\n}\n\nif (finalResponse.blog_info.structure.lists_count > 0) {\n  recommendations.push('Transform the structured lists into Twitter threads or LinkedIn carousel posts');\n}\n\nif (totalProcessed > 1) {\n  recommendations.push('Schedule posts across platforms at different times for maximum reach');\n}\n\nif (finalResponse.processing.platforms_failed.length > 0) {\n  recommendations.push('Review failed platforms and consider manual adaptation or retry processing');\n}\n\nfinalResponse.recommendations = {\n  content_strategy: recommendations,\n  best_performing_content_types: ['structured_lists', 'heading_based_sections', 'visual_supported_posts'],\n  cross_platform_tips: [\n    'Maintain consistent messaging across all platforms',\n    'Adapt content length to each platform\\'s optimal engagement patterns',\n    'Use platform-specific hashtags and formatting',\n    `Leverage the ${finalResponse.blog_info.analysis.topic_keywords.length} extracted keywords for SEO`\n  ]\n};\n\n// Error handling and validation\nif (finalResponse.processing.ai_nodes_executed === 0) {\n  finalResponse.success = false;\n  finalResponse.error = {\n    message: 'No content was generated for any platform',\n    possible_causes: [\n      'AI nodes may not be properly connected',\n      'Input data may be malformed',\n      'Blog content extraction may have failed'\n    ],\n    troubleshooting: [\n      'Check that all AI nodes are receiving proper input data',\n      'Verify blog URL is accessible and contains readable content',\n      'Ensure platform specifications match available AI nodes'\n    ]\n  };\n}\n\n// Add processing completion timestamp\nfinalResponse.completed_at = new Date().toISOString();\n\n// Calculate total processing time (simplified)\nfinalResponse.processing.total_processing_time = 'Processing completed successfully';\n\n// Log final summary\nconsole.log(`Processing Summary:`);\nconsole.log(`- Blog: \"${finalResponse.blog_info.title}\"`);\nconsole.log(`- Platforms processed: ${totalProcessed}/${totalRequested}`);\nconsole.log(`- Success rate: ${successRate}%`);\nconsole.log(`- Content pieces generated: ${Object.keys(finalResponse.generated_content).length}`);\n\nreturn [{ json: finalResponse }];"
      },
      "id": "44f4dd90-3507-4bd4-972e-2e5f82167f5d",
      "name": "Final Data Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        640
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c264b078-31ac-4d5e-8dc2-0d6add9a4cf9",
      "name": "Final Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2064,
        640
      ]
    },
    {
      "parameters": {
        "numberInputs": 7
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1664,
        560
      ],
      "id": "a9e46e01-af78-45d6-bcac-ed596edc853c",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const platforms = $('Input Validation & Transform').first().json.platformSpecifics;\nreturn platforms.map(p => ({ json: { platform: p } })); "
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        560
      ],
      "id": "4e3c9bb3-b8fd-41be-8a34-4383e0b35149",
      "name": "breaking platforms"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.platform }}",
                    "rightValue": "facebook",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "af8ce86b-dece-400e-bc06-13ed119b3c5a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7224e139-6345-49a3-9844-ee84005f0e83",
                    "leftValue": "={{ $json.platform }}",
                    "rightValue": "instagram",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "86b79a02-17dc-4e49-920a-189552fce620",
                    "leftValue": "={{ $json.platform }}",
                    "rightValue": "twitter/x",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e8a293a8-32fc-4961-afb5-381a2fc5bbb7",
                    "leftValue": "={{ $json.platform }}",
                    "rightValue": "linkedin",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1be0d61a-9331-41c3-a486-5bea726931f3",
                    "leftValue": "={{ $json.platform }}",
                    "rightValue": "youtube",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5772557d-29ab-43f3-9476-41174b582248",
                    "leftValue": "={{ $json.platform }}",
                    "rightValue": "telegram/whatsapp",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a4f1827-7740-43b4-a1c0-ddb4e3da003e",
                    "leftValue": "=",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        800,
        528
      ],
      "id": "b8843049-cea6-4c25-b09a-e0e68867ea1b",
      "name": "Switch"
    }
  ],
  "pinData": {
    "Webhook Start": [
      {
        "json": {
          "blogUrl": "https://www.totalhealthandfitness.com/how-to-stay-motivated-to-lose-weight/",
          "targetFormats": [
            "Instagram Reel",
            "Facebook Post",
            "Twitter Thread",
            "LinkedIn Article",
            "YouTube Video"
          ],
          "audienceDescription": "People who are overweight or trying to lose weight, struggling with motivation and looking for practical weight loss tips and encouragement",
          "tone": "Motivational",
          "platformSpecifics": [
            "Facebook",
            "Instagram",
            "Twitter/X",
            "LinkedIn",
            "YouTube"
          ],
          "languagePreference": "English",
          "localizationSettings": "India"
        }
      }
    ]
  },
  "connections": {
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Input Validation & Transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation & Transform": {
      "main": [
        [
          {
            "node": "Error Check IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Check IF": {
      "main": [
        [
          {
            "node": "Fetch Blog Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Blog Content": {
      "main": [
        [
          {
            "node": "HTTP Error Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Error Check": {
      "main": [
        [
          {
            "node": "HTML Extract & Structure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract & Structure": {
      "main": [
        [
          {
            "node": "breaking platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Final Data Processing": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twitter OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "LinkedIn OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "YouTube OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Telegram OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Other Platform OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Final Data Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "breaking platforms": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Facebook OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Instagram OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Twitter OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "LinkedIn OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "YouTube OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Other Platform OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "67851e3f-cfdd-4742-8f22-a38b56780265",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4449303a74121eea16a562b13bf56d7bf84f057d9cd2ad64d6c2afc9ccfe82ac"
  },
  "id": "kB6amBK0foV93WJS",
  "tags": []
}